!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";var n=[],i=t.document,o=Object.getPrototypeOf,r=n.slice,s=n.concat,a=n.push,l=n.indexOf,c={},h=c.toString,u=c.hasOwnProperty,d=u.toString,f=d.call(Object),p={};function g(t,e){var n=(e=e||i).createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}var v=function(t,e){return new v.fn.init(t,e)},m=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,w=/^-ms-/,y=/-([a-z])/g,x=function(t,e){return e.toUpperCase()};v.fn=v.prototype={jquery:"3.2.1",constructor:v,length:0,toArray:function(){return r.call(this)},get:function(t){return null==t?r.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=v.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return v.each(this,t)},map:function(t){return this.pushStack(v.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},v.extend=v.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(c&&i&&(v.isPlainObject(i)||(o=Array.isArray(i)))?(o?(o=!1,r=n&&Array.isArray(n)?n:[]):r=n&&v.isPlainObject(n)?n:{},s[e]=v.extend(c,r,i)):void 0!==i&&(s[e]=i));return s},v.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===v.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=v.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==h.call(t))&&(!(e=o(t))||"function"==typeof(n=u.call(e,"constructor")&&e.constructor)&&d.call(n)===f)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?c[h.call(t)]||"object":typeof t},globalEval:function(t){g(t)},camelCase:function(t){return t.replace(w,"ms-").replace(y,x)},each:function(t,e){var n,i=0;if(b(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(m,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(b(Object(t))?v.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:l.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,a=[];if(b(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&a.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&a.push(o);return s.apply([],a)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),v.isFunction(t))return i=r.call(arguments,2),(o=function(){return t.apply(e||this,i.concat(r.call(arguments)))}).guid=t.guid=t.guid||v.guid++,o},now:Date.now,support:p}),"function"==typeof Symbol&&(v.fn[Symbol.iterator]=n[Symbol.iterator]),v.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){c["[object "+e+"]"]=e.toLowerCase()});function b(t){var e=!!t&&"length"in t&&t.length,n=v.type(t);return"function"!==n&&!v.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}var C=function(t){var e,n,i,o,r,s,a,l,c,h,u,d,f,p,g,v,m,w,y,x="sizzle"+1*new Date,b=t.document,C=0,k=0,L=st(),T=st(),$=st(),E=function(t,e){return t===e&&(u=!0),0},M={}.hasOwnProperty,S=[],A=S.pop,B=S.push,N=S.push,D=S.slice,_=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",O="\\["+I+"*("+j+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+I+"*\\]",P=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",q=new RegExp(I+"+","g"),z=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),F=new RegExp("^"+I+"*,"+I+"*"),R=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),W=new RegExp("="+I+"*([^\\]'\"]*?)"+I+"*\\]","g"),Z=new RegExp(P),V=new RegExp("^"+j+"$"),U={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+I+"?|("+I+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){d()},ot=wt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{N.apply(S=D.call(b.childNodes),b.childNodes),S[b.childNodes.length].nodeType}catch(t){N={apply:S.length?function(t,e){B.apply(t,D.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function rt(t,e,i,o){var r,a,c,h,u,p,m,w=e&&e.ownerDocument,C=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==C&&9!==C&&11!==C)return i;if(!o&&((e?e.ownerDocument||e:b)!==f&&d(e),e=e||f,g)){if(11!==C&&(u=J.exec(t)))if(r=u[1]){if(9===C){if(!(c=e.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(w&&(c=w.getElementById(r))&&y(e,c)&&c.id===r)return i.push(c),i}else{if(u[2])return N.apply(i,e.getElementsByTagName(t)),i;if((r=u[3])&&n.getElementsByClassName&&e.getElementsByClassName)return N.apply(i,e.getElementsByClassName(r)),i}if(n.qsa&&!$[t+" "]&&(!v||!v.test(t))){if(1!==C)w=e,m=t;else if("object"!==e.nodeName.toLowerCase()){for((h=e.getAttribute("id"))?h=h.replace(et,nt):e.setAttribute("id",h=x),a=(p=s(t)).length;a--;)p[a]="#"+h+" "+mt(p[a]);m=p.join(","),w=Q.test(t)&&gt(e.parentNode)||e}if(m)try{return N.apply(i,w.querySelectorAll(m)),i}catch(t){}finally{h===x&&e.removeAttribute("id")}}}return l(t.replace(z,"$1"),e,i,o)}function st(){var t=[];return function e(n,o){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function at(t){return t[x]=!0,t}function lt(t){var e=f.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=e}function ht(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ut(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function ft(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ot(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function pt(t){return at(function(e){return e=+e,at(function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}n=rt.support={},r=rt.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},d=rt.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:b;return s!==f&&9===s.nodeType&&s.documentElement?(p=(f=s).documentElement,g=!r(f),b!==f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",it,!1):o.attachEvent&&o.attachEvent("onunload",it)),n.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=lt(function(t){return t.appendChild(f.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=G.test(f.getElementsByClassName),n.getById=lt(function(t){return p.appendChild(t).id=x,!f.getElementsByName||!f.getElementsByName(x).length}),n.getById?(i.filter.ID=function(t){var e=t.replace(K,tt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(K,tt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},m=[],v=[],(n.qsa=G.test(f.querySelectorAll))&&(lt(function(t){p.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+I+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+I+"*(?:value|"+H+")"),t.querySelectorAll("[id~="+x+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||v.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=f.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+I+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")})),(n.matchesSelector=G.test(w=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&lt(function(t){n.disconnectedMatch=w.call(t,"*"),w.call(t,"[s!='']:x"),m.push("!=",P)}),v=v.length&&new RegExp(v.join("|")),m=m.length&&new RegExp(m.join("|")),e=G.test(p.compareDocumentPosition),y=e||G.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},E=e?function(t,e){if(t===e)return u=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===f||t.ownerDocument===b&&y(b,t)?-1:e===f||e.ownerDocument===b&&y(b,e)?1:h?_(h,t)-_(h,e):0:4&i?-1:1)}:function(t,e){if(t===e)return u=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t===f?-1:e===f?1:o?-1:r?1:h?_(h,t)-_(h,e):0;if(o===r)return ht(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ht(s[i],a[i]):s[i]===b?-1:a[i]===b?1:0},f):f},rt.matches=function(t,e){return rt(t,null,null,e)},rt.matchesSelector=function(t,e){if((t.ownerDocument||t)!==f&&d(t),e=e.replace(W,"='$1']"),n.matchesSelector&&g&&!$[e+" "]&&(!m||!m.test(e))&&(!v||!v.test(e)))try{var i=w.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return rt(e,f,null,[t]).length>0},rt.contains=function(t,e){return(t.ownerDocument||t)!==f&&d(t),y(t,e)},rt.attr=function(t,e){(t.ownerDocument||t)!==f&&d(t);var o=i.attrHandle[e.toLowerCase()],r=o&&M.call(i.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==r?r:n.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},rt.escape=function(t){return(t+"").replace(et,nt)},rt.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},rt.uniqueSort=function(t){var e,i=[],o=0,r=0;if(u=!n.detectDuplicates,h=!n.sortStable&&t.slice(0),t.sort(E),u){for(;e=t[r++];)e===t[r]&&(o=i.push(r));for(;o--;)t.splice(i[o],1)}return h=null,t},o=rt.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},(i=rt.selectors={cacheLength:50,createPseudo:at,match:U,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(K,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(K,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||rt.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&rt.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return U.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&Z.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(K,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=L[t+" "];return e||(e=new RegExp("(^|"+I+")"+t+"("+I+"|$)"))&&L(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var o=rt.attr(i,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(q," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,h,u,d,f,p,g=r!==s?"nextSibling":"previousSibling",v=e.parentNode,m=a&&e.nodeName.toLowerCase(),w=!l&&!a,y=!1;if(v){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===m:1===d.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?v.firstChild:v.lastChild],s&&w){for(y=(f=(c=(h=(u=(d=v)[x]||(d[x]={}))[d.uniqueID]||(u[d.uniqueID]={}))[t]||[])[0]===C&&c[1])&&c[2],d=f&&v.childNodes[f];d=++f&&d&&d[g]||(y=f=0)||p.pop();)if(1===d.nodeType&&++y&&d===e){h[t]=[C,f,y];break}}else if(w&&(y=f=(c=(h=(u=(d=e)[x]||(d[x]={}))[d.uniqueID]||(u[d.uniqueID]={}))[t]||[])[0]===C&&c[1]),!1===y)for(;(d=++f&&d&&d[g]||(y=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==m:1!==d.nodeType)||!++y||(w&&((h=(u=d[x]||(d[x]={}))[d.uniqueID]||(u[d.uniqueID]={}))[t]=[C,y]),d!==e)););return(y-=o)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||rt.error("unsupported pseudo: "+t);return o[x]?o(e):o.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){for(var i,r=o(t,e),s=r.length;s--;)t[i=_(t,r[s])]=!(n[i]=r[s])}):function(t){return o(t,0,n)}):o}},pseudos:{not:at(function(t){var e=[],n=[],i=a(t.replace(z,"$1"));return i[x]?at(function(t,e,n,o){for(var r,s=i(t,null,o,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))}):function(t,o,r){return e[0]=t,i(e,null,r,n),e[0]=null,!n.pop()}}),has:at(function(t){return function(e){return rt(t,e).length>0}}),contains:at(function(t){return t=t.replace(K,tt),function(e){return(e.textContent||e.innerText||o(e)).indexOf(t)>-1}}),lang:at(function(t){return V.test(t||"")||rt.error("unsupported lang: "+t),t=t.replace(K,tt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ft(!1),disabled:ft(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:pt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:pt(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:pt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq;for(e in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ut(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=dt(e);function vt(){}vt.prototype=i.filters=i.pseudos,i.setFilters=new vt,s=rt.tokenize=function(t,e){var n,o,r,s,a,l,c,h=T[t+" "];if(h)return e?0:h.slice(0);for(a=t,l=[],c=i.preFilter;a;){n&&!(o=F.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=R.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(z," ")}),a=a.slice(n.length));for(s in i.filter)!(o=U[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return e?a.length:a?rt.error(t):T(t,l).slice(0)};function mt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function wt(t,e,n){var i=e.dir,o=e.next,r=o||i,s=n&&"parentNode"===r,a=k++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,o);return!1}:function(e,n,l){var c,h,u,d=[C,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(h=(u=e[x]||(e[x]={}))[e.uniqueID]||(u[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=h[r])&&c[0]===C&&c[1]===a)return d[2]=c[2];if(h[r]=d,d[2]=t(e,n,l))return!0}return!1}}function yt(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function xt(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),c&&e.push(a)));return s}function bt(t,e,n,i,o,r){return i&&!i[x]&&(i=bt(i)),o&&!o[x]&&(o=bt(o,r)),at(function(r,s,a,l){var c,h,u,d=[],f=[],p=s.length,g=r||function(t,e,n){for(var i=0,o=e.length;i<o;i++)rt(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),v=!t||!r&&e?g:xt(g,d,t,a,l),m=n?o||(r?t:p||i)?[]:s:v;if(n&&n(v,m,a,l),i)for(c=xt(m,f),i(c,[],a,l),h=c.length;h--;)(u=c[h])&&(m[f[h]]=!(v[f[h]]=u));if(r){if(o||t){if(o){for(c=[],h=m.length;h--;)(u=m[h])&&c.push(v[h]=u);o(null,m=[],c,l)}for(h=m.length;h--;)(u=m[h])&&(c=o?_(r,u):d[h])>-1&&(r[c]=!(s[c]=u))}}else m=xt(m===s?m.splice(p,m.length):m),o?o(null,s,m,l):N.apply(s,m)})}function Ct(t){for(var e,n,o,r=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,h=wt(function(t){return t===e},a,!0),u=wt(function(t){return _(e,t)>-1},a,!0),d=[function(t,n,i){var o=!s&&(i||n!==c)||((e=n).nodeType?h(t,n,i):u(t,n,i));return e=null,o}];l<r;l++)if(n=i.relative[t[l].type])d=[wt(yt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[x]){for(o=++l;o<r&&!i.relative[t[o].type];o++);return bt(l>1&&yt(d),l>1&&mt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(z,"$1"),n,l<o&&Ct(t.slice(l,o)),o<r&&Ct(t=t.slice(o)),o<r&&mt(t))}d.push(n)}return yt(d)}return a=rt.compile=function(t,e){var n,o=[],r=[],a=$[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Ct(e[n]))[x]?o.push(a):r.push(a);(a=$(t,function(t,e){var n=e.length>0,o=t.length>0,r=function(r,s,a,l,h){var u,p,v,m=0,w="0",y=r&&[],x=[],b=c,k=r||o&&i.find.TAG("*",h),L=C+=null==b?1:Math.random()||.1,T=k.length;for(h&&(c=s===f||s||h);w!==T&&null!=(u=k[w]);w++){if(o&&u){for(p=0,s||u.ownerDocument===f||(d(u),a=!g);v=t[p++];)if(v(u,s||f,a)){l.push(u);break}h&&(C=L)}n&&((u=!v&&u)&&m--,r&&y.push(u))}if(m+=w,n&&w!==m){for(p=0;v=e[p++];)v(y,x,s,a);if(r){if(m>0)for(;w--;)y[w]||x[w]||(x[w]=A.call(l));x=xt(x)}N.apply(l,x),h&&!r&&x.length>0&&m+e.length>1&&rt.uniqueSort(l)}return h&&(C=L,c=b),y};return n?at(r):r}(r,o))).selector=t}return a},l=rt.select=function(t,e,n,o){var r,l,c,h,u,d="function"==typeof t&&t,f=!o&&s(t=d.selector||t);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(K,tt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(r=U.needsContext.test(t)?0:l.length;r--&&(c=l[r],!i.relative[h=c.type]);)if((u=i.find[h])&&(o=u(c.matches[0].replace(K,tt),Q.test(l[0].type)&&gt(e.parentNode)||e))){if(l.splice(r,1),!(t=o.length&&mt(l)))return N.apply(n,o),n;break}}return(d||a(t,f))(o,e,!g,n,!e||Q.test(t)&&gt(e.parentNode)||e),n},n.sortStable=x.split("").sort(E).join("")===x,n.detectDuplicates=!!u,d(),n.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(f.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ct(H,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),rt}(t);v.find=C,v.expr=C.selectors,v.expr[":"]=v.expr.pseudos,v.uniqueSort=v.unique=C.uniqueSort,v.text=C.getText,v.isXMLDoc=C.isXML,v.contains=C.contains,v.escapeSelector=C.escape;var k=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&v(t).is(n))break;i.push(t)}return i},L=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},T=v.expr.match.needsContext;function $(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,M=/^.[^:#\[\.,]*$/;function S(t,e,n){return v.isFunction(e)?v.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?v.grep(t,function(t){return t===e!==n}):"string"!=typeof e?v.grep(t,function(t){return l.call(e,t)>-1!==n}):M.test(e)?v.filter(e,t,n):(e=v.filter(e,t),v.grep(t,function(t){return l.call(e,t)>-1!==n&&1===t.nodeType}))}v.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?v.find.matchesSelector(i,t)?[i]:[]:v.find.matches(t,v.grep(e,function(t){return 1===t.nodeType}))},v.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(v(t).filter(function(){for(e=0;e<i;e++)if(v.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)v.find(t,o[e],n);return i>1?v.uniqueSort(n):n},filter:function(t){return this.pushStack(S(this,t||[],!1))},not:function(t){return this.pushStack(S(this,t||[],!0))},is:function(t){return!!S(this,"string"==typeof t&&T.test(t)?v(t):t||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(v.fn.init=function(t,e,n){var o,r;if(!t)return this;if(n=n||A,"string"==typeof t){if(!(o="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:B.exec(t))||!o[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof v?e[0]:e,v.merge(this,v.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:i,!0)),E.test(o[1])&&v.isPlainObject(e))for(o in e)v.isFunction(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(r=i.getElementById(o[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v.isFunction(t)?void 0!==n.ready?n.ready(t):t(v):v.makeArray(t,this)}).prototype=v.fn,A=v(i);var N=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};v.fn.extend({has:function(t){var e=v(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(v.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&v(t);if(!T.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&v.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?v.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?l.call(v(t),this[0]):l.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(v.uniqueSort(v.merge(this.get(),v(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}});function _(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}v.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return k(t,"parentNode")},parentsUntil:function(t,e,n){return k(t,"parentNode",n)},next:function(t){return _(t,"nextSibling")},prev:function(t){return _(t,"previousSibling")},nextAll:function(t){return k(t,"nextSibling")},prevAll:function(t){return k(t,"previousSibling")},nextUntil:function(t,e,n){return k(t,"nextSibling",n)},prevUntil:function(t,e,n){return k(t,"previousSibling",n)},siblings:function(t){return L((t.parentNode||{}).firstChild,t)},children:function(t){return L(t.firstChild)},contents:function(t){return $(t,"iframe")?t.contentDocument:($(t,"template")&&(t=t.content||t),v.merge([],t.childNodes))}},function(t,e){v.fn[t]=function(n,i){var o=v.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=v.filter(i,o)),this.length>1&&(D[t]||v.uniqueSort(o),N.test(t)&&o.reverse()),this.pushStack(o)}});var H=/[^\x20\t\r\n\f]+/g;v.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return v.each(t.match(H)||[],function(t,n){e[n]=!0}),e}(t):v.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!e&&(a=r.length-1,s.push(n)),function e(n){v.each(n,function(n,i){v.isFunction(i)?t.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==v.type(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return v.each(arguments,function(t,e){for(var n;(n=v.inArray(e,r,n))>-1;)r.splice(n,1),n<=a&&a--}),this},has:function(t){return t?v.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||e||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c};function I(t){return t}function j(t){throw t}function O(t,e,n,i){var o;try{t&&v.isFunction(o=t.promise)?o.call(t).done(e).fail(n):t&&v.isFunction(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}v.extend({Deferred:function(e){var n=[["notify","progress",v.Callbacks("memory"),v.Callbacks("memory"),2],["resolve","done",v.Callbacks("once memory"),v.Callbacks("once memory"),0,"resolved"],["reject","fail",v.Callbacks("once memory"),v.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return v.Deferred(function(e){v.each(n,function(n,i){var o=v.isFunction(t[i[4]])&&t[i[4]];r[i[1]](function(){var t=o&&o.apply(this,arguments);t&&v.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[i[0]+"With"](this,o?[t]:arguments)})}),t=null}).promise()},then:function(e,i,o){var r=0;function s(e,n,i,o){return function(){var a=this,l=arguments,c=function(){var t,c;if(!(e<r)){if((t=i.apply(a,l))===n.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,v.isFunction(c)?o?c.call(t,s(r,n,I,o),s(r,n,j,o)):(r++,c.call(t,s(r,n,I,o),s(r,n,j,o),s(r,n,I,n.notifyWith))):(i!==I&&(a=void 0,l=[t]),(o||n.resolveWith)(a,l))}},h=o?c:function(){try{c()}catch(t){v.Deferred.exceptionHook&&v.Deferred.exceptionHook(t,h.stackTrace),e+1>=r&&(i!==j&&(a=void 0,l=[t]),n.rejectWith(a,l))}};e?h():(v.Deferred.getStackHook&&(h.stackTrace=v.Deferred.getStackHook()),t.setTimeout(h))}}return v.Deferred(function(t){n[0][3].add(s(0,t,v.isFunction(o)?o:I,t.notifyWith)),n[1][3].add(s(0,t,v.isFunction(e)?e:I)),n[2][3].add(s(0,t,v.isFunction(i)?i:j))}).promise()},promise:function(t){return null!=t?v.extend(t,o):o}},r={};return v.each(n,function(t,e){var s=e[2],a=e[5];o[e[1]]=s.add,a&&s.add(function(){i=a},n[3-t][2].disable,n[0][2].lock),s.add(e[3].fire),r[e[0]]=function(){return r[e[0]+"With"](this===r?void 0:this,arguments),this},r[e[0]+"With"]=s.fireWith}),o.promise(r),e&&e.call(r,r),r},when:function(t){var e=arguments.length,n=e,i=Array(n),o=r.call(arguments),s=v.Deferred(),a=function(t){return function(n){i[t]=this,o[t]=arguments.length>1?r.call(arguments):n,--e||s.resolveWith(i,o)}};if(e<=1&&(O(t,s.done(a(n)).resolve,s.reject,!e),"pending"===s.state()||v.isFunction(o[n]&&o[n].then)))return s.then();for(;n--;)O(o[n],a(n),s.reject);return s.promise()}});var P=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;v.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&P.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},v.readyException=function(e){t.setTimeout(function(){throw e})};var q=v.Deferred();v.fn.ready=function(t){return q.then(t).catch(function(t){v.readyException(t)}),this},v.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--v.readyWait:v.isReady)||(v.isReady=!0,!0!==t&&--v.readyWait>0||q.resolveWith(i,[v]))}}),v.ready.then=q.then;function z(){i.removeEventListener("DOMContentLoaded",z),t.removeEventListener("load",z),v.ready()}"complete"===i.readyState||"loading"!==i.readyState&&!i.documentElement.doScroll?t.setTimeout(v.ready):(i.addEventListener("DOMContentLoaded",z),t.addEventListener("load",z));var F=function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===v.type(n)){o=!0;for(a in n)F(t,e,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,v.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(v(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r},R=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function W(){this.expando=v.expando+W.uid++}W.uid=1,W.prototype={cache:function(t){var e=t[this.expando];return e||(e={},R(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[v.camelCase(e)]=n;else for(i in e)o[v.camelCase(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][v.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(v.camelCase):(e=v.camelCase(e))in i?[e]:e.match(H)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||v.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!v.isEmptyObject(e)}};var Z=new W,V=new W,U=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function X(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Y,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:U.test(o)?JSON.parse(o):o)}catch(t){}V.set(t,e,n)}else n=void 0;var o;return n}v.extend({hasData:function(t){return V.hasData(t)||Z.hasData(t)},data:function(t,e,n){return V.access(t,e,n)},removeData:function(t,e){V.remove(t,e)},_data:function(t,e,n){return Z.access(t,e,n)},_removeData:function(t,e){Z.remove(t,e)}}),v.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=V.get(r),1===r.nodeType&&!Z.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=v.camelCase(i.slice(5)),X(r,i,o[i]));Z.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){V.set(this,t)}):F(this,function(e){var n;if(r&&void 0===e){if(void 0!==(n=V.get(r,t)))return n;if(void 0!==(n=X(r,t)))return n}else this.each(function(){V.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){V.remove(this,t)})}}),v.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Z.get(t,e),n&&(!i||Array.isArray(n)?i=Z.access(t,e,v.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=v.queue(t,e),i=n.length,o=n.shift(),r=v._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){v.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Z.get(t,n)||Z.access(t,n,{empty:v.Callbacks("once memory").add(function(){Z.remove(t,[e+"queue",n])})})}}),v.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?v.queue(this[0],t):void 0===e?this:this.each(function(){var n=v.queue(this,t,e);v._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&v.dequeue(this,t)})},dequeue:function(t){return this.each(function(){v.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=v.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Z.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var G=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,J=new RegExp("^(?:([+-])=|)("+G+")([a-z%]*)$","i"),Q=["Top","Right","Bottom","Left"],K=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&v.contains(t.ownerDocument,t)&&"none"===v.css(t,"display")},tt=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];o=n.apply(t,i||[]);for(r in e)t.style[r]=s[r];return o};function et(t,e,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return v.css(t,e,"")},l=a(),c=n&&n[3]||(v.cssNumber[e]?"":"px"),h=(v.cssNumber[e]||"px"!==c&&+l)&&J.exec(v.css(t,e));if(h&&h[3]!==c){c=c||h[3],n=n||[],h=+l||1;do{h/=r=r||".5",v.style(t,e,h+c)}while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(h=+h||+l||0,o=n[1]?h+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=h,i.end=o)),o}var nt={};function it(t){var e,n=t.ownerDocument,i=t.nodeName,o=nt[i];return o||(e=n.body.appendChild(n.createElement(i)),o=v.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),nt[i]=o,o)}function ot(t,e){for(var n,i,o=[],r=0,s=t.length;r<s;r++)(i=t[r]).style&&(n=i.style.display,e?("none"===n&&(o[r]=Z.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&K(i)&&(o[r]=it(i))):"none"!==n&&(o[r]="none",Z.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(t[r].style.display=o[r]);return t}v.fn.extend({show:function(){return ot(this,!0)},hide:function(){return ot(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){K(this)?v(this).show():v(this).hide()})}});var rt=/^(?:checkbox|radio)$/i,st=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,at=/^$|\/(?:java|ecma)script/i,lt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};lt.optgroup=lt.option,lt.tbody=lt.tfoot=lt.colgroup=lt.caption=lt.thead,lt.th=lt.td;function ct(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&$(t,e)?v.merge([t],n):n}function ht(t,e){for(var n=0,i=t.length;n<i;n++)Z.set(t[n],"globalEval",!e||Z.get(e[n],"globalEval"))}var ut=/<|&#?\w+;/;function dt(t,e,n,i,o){for(var r,s,a,l,c,h,u=e.createDocumentFragment(),d=[],f=0,p=t.length;f<p;f++)if((r=t[f])||0===r)if("object"===v.type(r))v.merge(d,r.nodeType?[r]:r);else if(ut.test(r)){for(s=s||u.appendChild(e.createElement("div")),a=(st.exec(r)||["",""])[1].toLowerCase(),l=lt[a]||lt._default,s.innerHTML=l[1]+v.htmlPrefilter(r)+l[2],h=l[0];h--;)s=s.lastChild;v.merge(d,s.childNodes),(s=u.firstChild).textContent=""}else d.push(e.createTextNode(r));for(u.textContent="",f=0;r=d[f++];)if(i&&v.inArray(r,i)>-1)o&&o.push(r);else if(c=v.contains(r.ownerDocument,r),s=ct(u.appendChild(r),"script"),c&&ht(s),n)for(h=0;r=s[h++];)at.test(r.type||"")&&n.push(r);return u}!function(){var t=i.createDocumentFragment().appendChild(i.createElement("div")),e=i.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),p.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var ft=i.documentElement,pt=/^key/,gt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,vt=/^([^.]*)(?:\.(.+)|)/;function mt(){return!0}function wt(){return!1}function yt(){try{return i.activeElement}catch(t){}}function xt(t,e,n,i,o,r){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)xt(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=wt;else if(!o)return t;return 1===r&&(s=o,(o=function(t){return v().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=v.guid++)),t.each(function(){v.event.add(this,e,o,i,n)})}v.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,h,u,d,f,p,g,m=Z.get(t);if(m)for(n.handler&&(n=(r=n).handler,o=r.selector),o&&v.find.matchesSelector(ft,o),n.guid||(n.guid=v.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==v&&v.event.triggered!==e.type?v.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)f=g=(a=vt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(u=v.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=v.event.special[f]||{},h=v.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&v.expr.match.needsContext.test(o),namespace:p.join(".")},r),(d=l[f])||((d=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(f,s)),u.add&&(u.add.call(t,h),h.handler.guid||(h.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,h):d.push(h),v.event.global[f]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,h,u,d,f,p,g,m=Z.hasData(t)&&Z.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(H)||[""]).length;c--;)if(f=g=(a=vt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(u=v.event.special[f]||{},d=l[f=(i?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=d.length;r--;)h=d[r],!o&&g!==h.origType||n&&n.guid!==h.guid||a&&!a.test(h.namespace)||i&&i!==h.selector&&("**"!==i||!h.selector)||(d.splice(r,1),h.selector&&d.delegateCount--,u.remove&&u.remove.call(t,h));s&&!d.length&&(u.teardown&&!1!==u.teardown.call(t,p,m.handle)||v.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)v.event.remove(t,f+e[c],n,i,!0);v.isEmptyObject(l)&&Z.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s,a=v.event.fix(t),l=new Array(arguments.length),c=(Z.get(this,"events")||{})[a.type]||[],h=v.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,a)){for(s=v.event.handlers.call(this,a,c),e=0;(o=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(i=((v.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?v(o,this).index(c)>-1:v.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(v.Event.prototype,t,{enumerable:!0,configurable:!0,get:v.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[v.expando]?t:new v.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==yt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===yt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&$(this,"input"))return this.click(),!1},_default:function(t){return $(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},v.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},v.Event=function(t,e){if(!(this instanceof v.Event))return new v.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?mt:wt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&v.extend(this,e),this.timeStamp=t&&t.timeStamp||v.now(),this[v.expando]=!0},v.Event.prototype={constructor:v.Event,isDefaultPrevented:wt,isPropagationStopped:wt,isImmediatePropagationStopped:wt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=mt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=mt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=mt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},v.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&pt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&gt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},v.event.addProp),v.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){v.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||v.contains(this,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),v.fn.extend({on:function(t,e,n,i){return xt(this,t,e,n,i)},one:function(t,e,n,i){return xt(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,v(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=wt),this.each(function(){v.event.remove(this,t,n,e)})}});var bt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ct=/<script|<style|<link/i,kt=/checked\s*(?:[^=]|=\s*.checked.)/i,Lt=/^true\/(.*)/,Tt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function $t(t,e){return $(t,"table")&&$(11!==e.nodeType?e:e.firstChild,"tr")?v(">tbody",t)[0]||t:t}function Et(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Mt(t){var e=Lt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function St(t,e){var n,i,o,r,s,a,l,c;if(1===e.nodeType){if(Z.hasData(t)&&(r=Z.access(t),s=Z.set(e,r),c=r.events)){delete s.handle,s.events={};for(o in c)for(n=0,i=c[o].length;n<i;n++)v.event.add(e,o,c[o][n])}V.hasData(t)&&(a=V.access(t),l=v.extend({},a),V.set(e,l))}}function At(t,e){var n=e.nodeName.toLowerCase();"input"===n&&rt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Bt(t,e,n,i){e=s.apply([],e);var o,r,a,l,c,h,u=0,d=t.length,f=d-1,m=e[0],w=v.isFunction(m);if(w||d>1&&"string"==typeof m&&!p.checkClone&&kt.test(m))return t.each(function(o){var r=t.eq(o);w&&(e[0]=m.call(this,o,r.html())),Bt(r,e,n,i)});if(d&&(r=(o=dt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(l=(a=v.map(ct(o,"script"),Et)).length;u<d;u++)c=o,u!==f&&(c=v.clone(c,!0,!0),l&&v.merge(a,ct(c,"script"))),n.call(t[u],c,u);if(l)for(h=a[a.length-1].ownerDocument,v.map(a,Mt),u=0;u<l;u++)c=a[u],at.test(c.type||"")&&!Z.access(c,"globalEval")&&v.contains(h,c)&&(c.src?v._evalUrl&&v._evalUrl(c.src):g(c.textContent.replace(Tt,""),h))}return t}function Nt(t,e,n){for(var i,o=e?v.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||v.cleanData(ct(i)),i.parentNode&&(n&&v.contains(i.ownerDocument,i)&&ht(ct(i,"script")),i.parentNode.removeChild(i));return t}v.extend({htmlPrefilter:function(t){return t.replace(bt,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=v.contains(t.ownerDocument,t);if(!(p.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||v.isXMLDoc(t)))for(s=ct(a),i=0,o=(r=ct(t)).length;i<o;i++)At(r[i],s[i]);if(e)if(n)for(r=r||ct(t),s=s||ct(a),i=0,o=r.length;i<o;i++)St(r[i],s[i]);else St(t,a);return(s=ct(a,"script")).length>0&&ht(s,!l&&ct(t,"script")),a},cleanData:function(t){for(var e,n,i,o=v.event.special,r=0;void 0!==(n=t[r]);r++)if(R(n)){if(e=n[Z.expando]){if(e.events)for(i in e.events)o[i]?v.event.remove(n,i):v.removeEvent(n,i,e.handle);n[Z.expando]=void 0}n[V.expando]&&(n[V.expando]=void 0)}}}),v.fn.extend({detach:function(t){return Nt(this,t,!0)},remove:function(t){return Nt(this,t)},text:function(t){return F(this,function(t){return void 0===t?v.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Bt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){$t(this,t).appendChild(t)}})},prepend:function(){return Bt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=$t(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(v.cleanData(ct(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return v.clone(this,t,e)})},html:function(t){return F(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ct.test(t)&&!lt[(st.exec(t)||["",""])[1].toLowerCase()]){t=v.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(v.cleanData(ct(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,function(e){var n=this.parentNode;v.inArray(this,t)<0&&(v.cleanData(ct(this)),n&&n.replaceChild(e,this))},t)}}),v.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){v.fn[t]=function(t){for(var n,i=[],o=v(t),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),v(o[s])[e](n),a.apply(i,n.get());return this.pushStack(i)}});var Dt=/^margin/,_t=new RegExp("^("+G+")(?!px)[a-z%]+$","i"),Ht=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)};!function(){function e(){if(l){l.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",l.innerHTML="",ft.appendChild(a);var e=t.getComputedStyle(l);n="1%"!==e.top,s="2px"===e.marginLeft,o="4px"===e.width,l.style.marginRight="50%",r="4px"===e.marginRight,ft.removeChild(a),l=null}}var n,o,r,s,a=i.createElement("div"),l=i.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===l.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(l),v.extend(p,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return e(),o},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),s}}))}();function It(t,e,n){var i,o,r,s,a=t.style;return(n=n||Ht(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||v.contains(t.ownerDocument,t)||(s=v.style(t,e)),!p.pixelMarginRight()&&_t.test(s)&&Dt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}var Ot=/^(none|table(?!-c[ea]).+)/,Pt=/^--/,qt={position:"absolute",visibility:"hidden",display:"block"},zt={letterSpacing:"0",fontWeight:"400"},Ft=["Webkit","Moz","ms"],Rt=i.createElement("div").style;function Wt(t){var e=v.cssProps[t];return e||(e=v.cssProps[t]=function(t){if(t in Rt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Ft.length;n--;)if((t=Ft[n]+e)in Rt)return t}(t)||t),e}function Zt(t,e,n){var i=J.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Vt(t,e,n,i,o){var r,s=0;for(r=n===(i?"border":"content")?4:"width"===e?1:0;r<4;r+=2)"margin"===n&&(s+=v.css(t,n+Q[r],!0,o)),i?("content"===n&&(s-=v.css(t,"padding"+Q[r],!0,o)),"margin"!==n&&(s-=v.css(t,"border"+Q[r]+"Width",!0,o))):(s+=v.css(t,"padding"+Q[r],!0,o),"padding"!==n&&(s+=v.css(t,"border"+Q[r]+"Width",!0,o)));return s}function Ut(t,e,n){var i,o=Ht(t),r=It(t,e,o),s="border-box"===v.css(t,"boxSizing",!1,o);return _t.test(r)?r:(i=s&&(p.boxSizingReliable()||r===t.style[e]),"auto"===r&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)]),(r=parseFloat(r)||0)+Vt(t,e,n||(s?"border":"content"),i,o)+"px")}v.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=It(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=v.camelCase(e),l=Pt.test(e),c=t.style;if(l||(e=Wt(a)),s=v.cssHooks[e]||v.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:c[e];"string"===(r=typeof n)&&(o=J.exec(n))&&o[1]&&(n=et(t,e,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(v.cssNumber[a]?"":"px")),p.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var o,r,s,a=v.camelCase(e);return Pt.test(e)||(e=Wt(a)),(s=v.cssHooks[e]||v.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=It(t,e,i)),"normal"===o&&e in zt&&(o=zt[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),v.each(["height","width"],function(t,e){v.cssHooks[e]={get:function(t,n,i){if(n)return!Ot.test(v.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Ut(t,e,i):tt(t,qt,function(){return Ut(t,e,i)})},set:function(t,n,i){var o,r=i&&Ht(t),s=i&&Vt(t,e,i,"border-box"===v.css(t,"boxSizing",!1,r),r);return s&&(o=J.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=v.css(t,e)),Zt(0,n,s)}}}),v.cssHooks.marginLeft=jt(p.reliableMarginLeft,function(t,e){if(e)return(parseFloat(It(t,"marginLeft"))||t.getBoundingClientRect().left-tt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),v.each({margin:"",padding:"",border:"Width"},function(t,e){v.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+Q[i]+e]=r[i]||r[i-2]||r[0];return o}},Dt.test(t)||(v.cssHooks[t+e].set=Zt)}),v.fn.extend({css:function(t,e){return F(this,function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Ht(t),o=e.length;s<o;s++)r[e[s]]=v.css(t,e[s],!1,i);return r}return void 0!==n?v.style(t,e,n):v.css(t,e)},t,e,arguments.length>1)}});function Yt(t,e,n,i,o){return new Yt.prototype.init(t,e,n,i,o)}v.Tween=Yt,Yt.prototype={constructor:Yt,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||v.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(v.cssNumber[n]?"":"px")},cur:function(){var t=Yt.propHooks[this.prop];return t&&t.get?t.get(this):Yt.propHooks._default.get(this)},run:function(t){var e,n=Yt.propHooks[this.prop];return this.options.duration?this.pos=e=v.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Yt.propHooks._default.set(this),this}},Yt.prototype.init.prototype=Yt.prototype,Yt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=v.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){v.fx.step[t.prop]?v.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[v.cssProps[t.prop]]&&!v.cssHooks[t.prop]?t.elem[t.prop]=t.now:v.style(t.elem,t.prop,t.now+t.unit)}}},Yt.propHooks.scrollTop=Yt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},v.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},v.fx=Yt.prototype.init,v.fx.step={};var Xt,Gt,Jt=/^(?:toggle|show|hide)$/,Qt=/queueHooks$/;function Kt(){Gt&&(!1===i.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(Kt):t.setTimeout(Kt,v.fx.interval),v.fx.tick())}function te(){return t.setTimeout(function(){Xt=void 0}),Xt=v.now()}function ee(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=Q[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function ne(t,e,n){for(var i,o=(ie.tweeners[e]||[]).concat(ie.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function ie(t,e,n){var i,o,r=0,s=ie.prefilters.length,a=v.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Xt||te(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:v.extend({},e),opts:v.extend(!0,{specialEasing:{},easing:v.easing._default},n),originalProperties:e,originalOptions:n,startTime:Xt||te(),duration:n.duration,tweens:[],createTween:function(e,n){var i=v.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),h=c.props;for(!function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=v.camelCase(n)],r=t[n],Array.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=v.cssHooks[i])&&"expand"in s){r=s.expand(r),delete t[i];for(n in r)n in t||(t[n]=r[n],e[n]=o)}else e[i]=o}(h,c.opts.specialEasing);r<s;r++)if(i=ie.prefilters[r].call(c,t,h,c.opts))return v.isFunction(i.stop)&&(v._queueHooks(c.elem,c.opts.queue).stop=v.proxy(i.stop,i)),i;return v.map(h,ne,c),v.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),v.fx.timer(v.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}v.Animation=v.extend(ie,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return et(n.elem,t,J.exec(e),n),n}]},tweener:function(t,e){v.isFunction(t)?(e=t,t=["*"]):t=t.match(H);for(var n,i=0,o=t.length;i<o;i++)n=t[i],ie.tweeners[n]=ie.tweeners[n]||[],ie.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,h,u="width"in e||"height"in e,d=this,f={},p=t.style,g=t.nodeType&&K(t),m=Z.get(t,"fxshow");n.queue||(null==(s=v._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,v.queue(t,"fx").length||s.empty.fire()})}));for(i in e)if(o=e[i],Jt.test(o)){if(delete e[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||v.style(t,i)}if((l=!v.isEmptyObject(e))||!v.isEmptyObject(f)){u&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=Z.get(t,"display")),"none"===(h=v.css(t,"display"))&&(c?h=c:(ot([t],!0),c=t.style.display||c,h=v.css(t,"display"),ot([t]))),("inline"===h||"inline-block"===h&&null!=c)&&"none"===v.css(t,"float")&&(l||(d.done(function(){p.display=c}),null==c&&(h=p.display,c="none"===h?"":h)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(m?"hidden"in m&&(g=m.hidden):m=Z.access(t,"fxshow",{display:c}),r&&(m.hidden=!g),g&&ot([t],!0),d.done(function(){g||ot([t]),Z.remove(t,"fxshow");for(i in f)v.style(t,i,f[i])})),l=ne(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(t,e){e?ie.prefilters.unshift(t):ie.prefilters.push(t)}}),v.speed=function(t,e,n){var i=t&&"object"==typeof t?v.extend({},t):{complete:n||!n&&e||v.isFunction(t)&&t,duration:t,easing:n&&e||e&&!v.isFunction(e)&&e};return v.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in v.fx.speeds?i.duration=v.fx.speeds[i.duration]:i.duration=v.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v.isFunction(i.old)&&i.old.call(this),i.queue&&v.dequeue(this,i.queue)},i},v.fn.extend({fadeTo:function(t,e,n,i){return this.filter(K).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=v.isEmptyObject(t),r=v.speed(e,n,i),s=function(){var e=ie(this,v.extend({},t),r);(o||Z.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=v.timers,s=Z.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&Qt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||v.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Z.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=v.timers,s=i?i.length:0;for(n.finish=!0,v.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),v.each(["toggle","show","hide"],function(t,e){var n=v.fn[e];v.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ee(e,!0),t,i,o)}}),v.each({slideDown:ee("show"),slideUp:ee("hide"),slideToggle:ee("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){v.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),v.timers=[],v.fx.tick=function(){var t,e=0,n=v.timers;for(Xt=v.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||v.fx.stop(),Xt=void 0},v.fx.timer=function(t){v.timers.push(t),v.fx.start()},v.fx.interval=13,v.fx.start=function(){Gt||(Gt=!0,Kt())},v.fx.stop=function(){Gt=null},v.fx.speeds={slow:600,fast:200,_default:400},v.fn.delay=function(e,n){return e=v.fx?v.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t=i.createElement("input"),e=i.createElement("select").appendChild(i.createElement("option"));t.type="checkbox",p.checkOn=""!==t.value,p.optSelected=e.selected,(t=i.createElement("input")).value="t",t.type="radio",p.radioValue="t"===t.value}();var oe,re=v.expr.attrHandle;v.fn.extend({attr:function(t,e){return F(this,v.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){v.removeAttr(this,t)})}}),v.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?v.prop(t,e,n):(1===r&&v.isXMLDoc(t)||(o=v.attrHooks[e.toLowerCase()]||(v.expr.match.bool.test(e)?oe:void 0)),void 0!==n?null===n?void v.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=v.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!p.radioValue&&"radio"===e&&$(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(H);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),oe={set:function(t,e,n){return!1===e?v.removeAttr(t,n):t.setAttribute(n,n),n}},v.each(v.expr.match.bool.source.match(/\w+/g),function(t,e){var n=re[e]||v.find.attr;re[e]=function(t,e,i){var o,r,s=e.toLowerCase();return i||(r=re[s],re[s]=o,o=null!=n(t,e,i)?s:null,re[s]=r),o}});var se=/^(?:input|select|textarea|button)$/i,ae=/^(?:a|area)$/i;v.fn.extend({prop:function(t,e){return F(this,v.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[v.propFix[t]||t]})}}),v.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&v.isXMLDoc(t)||(e=v.propFix[e]||e,o=v.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=v.find.attr(t,"tabindex");return e?parseInt(e,10):se.test(t.nodeName)||ae.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(v.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),v.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){v.propFix[this.toLowerCase()]=this});function le(t){return(t.match(H)||[]).join(" ")}function ce(t){return t.getAttribute&&t.getAttribute("class")||""}v.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(v.isFunction(t))return this.each(function(e){v(this).addClass(t.call(this,e,ce(this)))});if("string"==typeof t&&t)for(e=t.match(H)||[];n=this[l++];)if(o=ce(n),i=1===n.nodeType&&" "+le(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=le(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(v.isFunction(t))return this.each(function(e){v(this).removeClass(t.call(this,e,ce(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(H)||[];n=this[l++];)if(o=ce(n),i=1===n.nodeType&&" "+le(o)+" "){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=le(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):v.isFunction(t)?this.each(function(n){v(this).toggleClass(t.call(this,n,ce(this),e),e)}):this.each(function(){var e,i,o,r;if("string"===n)for(i=0,o=v(this),r=t.match(H)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=ce(this))&&Z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Z.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+le(ce(n))+" ").indexOf(e)>-1)return!0;return!1}});var he=/\r/g;v.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=v.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,v(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=v.map(o,function(t){return null==t?"":t+""})),(e=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return(e=v.valHooks[o.type]||v.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(he,""):null==n?"":n}}}),v.extend({valHooks:{option:{get:function(t){var e=v.find.attr(t,"value");return null!=e?e:le(v.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!$(n.parentNode,"optgroup"))){if(e=v(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=v.makeArray(e),s=o.length;s--;)((i=o[s]).selected=v.inArray(v.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),v.each(["radio","checkbox"],function(){v.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=v.inArray(v(t).val(),e)>-1}},p.checkOn||(v.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var ue=/^(?:focusinfocus|focusoutblur)$/;v.extend(v.event,{trigger:function(e,n,o,r){var s,a,l,c,h,d,f,p=[o||i],g=u.call(e,"type")?e.type:e,m=u.call(e,"namespace")?e.namespace.split("."):[];if(a=l=o=o||i,3!==o.nodeType&&8!==o.nodeType&&!ue.test(g+v.event.triggered)&&(g.indexOf(".")>-1&&(g=(m=g.split(".")).shift(),m.sort()),h=g.indexOf(":")<0&&"on"+g,(e=e[v.expando]?e:new v.Event(g,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=o),n=null==n?[e]:v.makeArray(n,[e]),f=v.event.special[g]||{},r||!f.trigger||!1!==f.trigger.apply(o,n))){if(!r&&!f.noBubble&&!v.isWindow(o)){for(c=f.delegateType||g,ue.test(c+g)||(a=a.parentNode);a;a=a.parentNode)p.push(a),l=a;l===(o.ownerDocument||i)&&p.push(l.defaultView||l.parentWindow||t)}for(s=0;(a=p[s++])&&!e.isPropagationStopped();)e.type=s>1?c:f.bindType||g,(d=(Z.get(a,"events")||{})[e.type]&&Z.get(a,"handle"))&&d.apply(a,n),(d=h&&a[h])&&d.apply&&R(a)&&(e.result=d.apply(a,n),!1===e.result&&e.preventDefault());return e.type=g,r||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),n)||!R(o)||h&&v.isFunction(o[g])&&!v.isWindow(o)&&((l=o[h])&&(o[h]=null),v.event.triggered=g,o[g](),v.event.triggered=void 0,l&&(o[h]=l)),e.result}},simulate:function(t,e,n){var i=v.extend(new v.Event,n,{type:t,isSimulated:!0});v.event.trigger(i,null,e)}}),v.fn.extend({trigger:function(t,e){return this.each(function(){v.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return v.event.trigger(t,e,n,!0)}}),v.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){v.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),v.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),p.focusin="onfocusin"in t,p.focusin||v.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){v.event.simulate(e,t.target,v.event.fix(t))};v.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=Z.access(i,e);o||i.addEventListener(t,n,!0),Z.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=Z.access(i,e)-1;o?Z.access(i,e,o):(i.removeEventListener(t,n,!0),Z.remove(i,e))}}});var de=t.location,fe=v.now(),pe=/\?/;v.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||v.error("Invalid XML: "+e),n};var ge=/\[\]$/,ve=/\r?\n/g,me=/^(?:submit|button|image|reset|file)$/i,we=/^(?:input|select|textarea|keygen)/i;function ye(t,e,n,i){var o;if(Array.isArray(e))v.each(e,function(e,o){n||ge.test(t)?i(t,o):ye(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==v.type(e))i(t,e);else for(o in e)ye(t+"["+o+"]",e[o],n,i)}v.param=function(t,e){var n,i=[],o=function(t,e){var n=v.isFunction(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!v.isPlainObject(t))v.each(t,function(){o(this.name,this.value)});else for(n in t)ye(n,t[n],e,o);return i.join("&")},v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=v.prop(this,"elements");return t?v.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!v(this).is(":disabled")&&we.test(this.nodeName)&&!me.test(t)&&(this.checked||!rt.test(t))}).map(function(t,e){var n=v(this).val();return null==n?null:Array.isArray(n)?v.map(n,function(t){return{name:e.name,value:t.replace(ve,"\r\n")}}):{name:e.name,value:n.replace(ve,"\r\n")}}).get()}});var xe=/%20/g,be=/#.*$/,Ce=/([?&])_=[^&]*/,ke=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:GET|HEAD)$/,Te=/^\/\//,$e={},Ee={},Me="*/".concat("*"),Se=i.createElement("a");Se.href=de.href;function Ae(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(H)||[];if(v.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Be(t,e,n,i){var o={},r=t===Ee;function s(a){var l;return o[a]=!0,v.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),l}return s(e.dataTypes[0])||!o["*"]&&s("*")}function Ne(t,e){var n,i,o=v.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&v.extend(!0,t,i),t}v.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:de.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(de.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":v.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ne(Ne(t,v.ajaxSettings),e):Ne(v.ajaxSettings,t)},ajaxPrefilter:Ae($e),ajaxTransport:Ae(Ee),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,r,s,a,l,c,h,u,d,f,p=v.ajaxSetup({},n),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?v(g):v.event,w=v.Deferred(),y=v.Callbacks("once memory"),x=p.statusCode||{},b={},C={},k="canceled",L={readyState:0,getResponseHeader:function(t){var e;if(h){if(!a)for(a={};e=ke.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return h?s:null},setRequestHeader:function(t,e){return null==h&&(t=C[t.toLowerCase()]=C[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==h&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)L.always(t[L.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||k;return o&&o.abort(e),T(0,e),this}};if(w.promise(L),p.url=((e||p.url||de.href)+"").replace(Te,de.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(H)||[""],null==p.crossDomain){c=i.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Se.protocol+"//"+Se.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=v.param(p.data,p.traditional)),Be($e,p,n,L),h)return L;(u=v.event&&p.global)&&0==v.active++&&v.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Le.test(p.type),r=p.url.replace(be,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(xe,"+")):(f=p.url.slice(r.length),p.data&&(r+=(pe.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Ce,"$1"),f=(pe.test(r)?"&":"?")+"_="+fe+++f),p.url=r+f),p.ifModified&&(v.lastModified[r]&&L.setRequestHeader("If-Modified-Since",v.lastModified[r]),v.etag[r]&&L.setRequestHeader("If-None-Match",v.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&L.setRequestHeader("Content-Type",p.contentType),L.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Me+"; q=0.01":""):p.accepts["*"]);for(d in p.headers)L.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(g,L,p)||h))return L.abort();if(k="abort",y.add(p.complete),L.done(p.success),L.fail(p.error),o=Be(Ee,p,n,L)){if(L.readyState=1,u&&m.trigger("ajaxSend",[L,p]),h)return L;p.async&&p.timeout>0&&(l=t.setTimeout(function(){L.abort("timeout")},p.timeout));try{h=!1,o.send(b,T)}catch(t){if(h)throw t;T(-1,t)}}else T(-1,"No Transport");function T(e,n,i,a){var c,d,f,b,C,k=n;h||(h=!0,l&&t.clearTimeout(l),o=void 0,s=a||"",L.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(b=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(p,L,i)),b=function(t,e,n,i){var o,r,s,a,l,c={},h=t.dataTypes.slice();if(h[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=h.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=h.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],h.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(p,b,L,c),c?(p.ifModified&&((C=L.getResponseHeader("Last-Modified"))&&(v.lastModified[r]=C),(C=L.getResponseHeader("etag"))&&(v.etag[r]=C)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=b.state,d=b.data,c=!(f=b.error))):(f=k,!e&&k||(k="error",e<0&&(e=0))),L.status=e,L.statusText=(n||k)+"",c?w.resolveWith(g,[d,k,L]):w.rejectWith(g,[L,k,f]),L.statusCode(x),x=void 0,u&&m.trigger(c?"ajaxSuccess":"ajaxError",[L,p,c?d:f]),y.fireWith(g,[L,k]),u&&(m.trigger("ajaxComplete",[L,p]),--v.active||v.event.trigger("ajaxStop")))}return L},getJSON:function(t,e,n){return v.get(t,e,n,"json")},getScript:function(t,e){return v.get(t,void 0,e,"script")}}),v.each(["get","post"],function(t,e){v[e]=function(t,n,i,o){return v.isFunction(n)&&(o=o||i,i=n,n=void 0),v.ajax(v.extend({url:t,type:e,dataType:o,data:n,success:i},v.isPlainObject(t)&&t))}}),v._evalUrl=function(t){return v.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},v.fn.extend({wrapAll:function(t){var e;return this[0]&&(v.isFunction(t)&&(t=t.call(this[0])),e=v(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return v.isFunction(t)?this.each(function(e){v(this).wrapInner(t.call(this,e))}):this.each(function(){var e=v(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=v.isFunction(t);return this.each(function(n){v(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){v(this).replaceWith(this.childNodes)}),this}}),v.expr.pseudos.hidden=function(t){return!v.expr.pseudos.visible(t)},v.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},v.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var De={0:200,1223:204},_e=v.ajaxSettings.xhr();p.cors=!!_e&&"withCredentials"in _e,p.ajax=_e=!!_e,v.ajaxTransport(function(e){var n,i;if(p.cors||_e&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(s in o)a.setRequestHeader(s,o[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(De[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),v.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),v.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return v.globalEval(t),t}}}),v.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),v.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(o,r){e=v("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),i.head.appendChild(e[0])},abort:function(){n&&n()}}}});var He=[],Ie=/(=)\?(?=&|$)|\?\?/;v.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=He.pop()||v.expando+"_"+fe++;return this[t]=!0,t}}),v.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=!1!==e.jsonp&&(Ie.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ie.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ie,"$1"+o):!1!==e.jsonp&&(e.url+=(pe.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||v.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always(function(){void 0===r?v(t).removeProp(o):t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,He.push(o)),s&&v.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),p.createHTMLDocument=function(){var t=i.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),v.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var o,r,s;return e||(p.createHTMLDocument?((o=(e=i.implementation.createHTMLDocument("")).createElement("base")).href=i.location.href,e.head.appendChild(o)):e=i),r=E.exec(t),s=!n&&[],r?[e.createElement(r[1])]:(r=dt([t],e,s),s&&s.length&&v(s).remove(),v.merge([],r.childNodes))},v.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=le(t.slice(a)),t=t.slice(0,a)),v.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&v.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?v("<div>").append(v.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},v.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){v.fn[e]=function(t){return this.on(e,t)}}),v.expr.pseudos.animated=function(t){return v.grep(v.timers,function(e){return t===e.elem}).length},v.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,c=v.css(t,"position"),h=v(t),u={};"static"===c&&(t.style.position="relative"),a=h.offset(),r=v.css(t,"top"),l=v.css(t,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=h.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),v.isFunction(e)&&(e=e.call(t,n,v.extend({},a))),null!=e.top&&(u.top=e.top-a.top+s),null!=e.left&&(u.left=e.left-a.left+o),"using"in e?e.using.call(t,u):h.css(u)}},v.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){v.offset.setOffset(this,t,e)});var e,n,i,o,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),n=(e=r.ownerDocument).documentElement,o=e.defaultView,{top:i.top+o.pageYOffset-n.clientTop,left:i.left+o.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===v.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),$(t[0],"html")||(i=t.offset()),i={top:i.top+v.css(t[0],"borderTopWidth",!0),left:i.left+v.css(t[0],"borderLeftWidth",!0)}),{top:e.top-i.top-v.css(n,"marginTop",!0),left:e.left-i.left-v.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===v.css(t,"position");)t=t.offsetParent;return t||ft})}}),v.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;v.fn[t]=function(i){return F(this,function(t,i,o){var r;if(v.isWindow(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o},t,i,arguments.length)}}),v.each(["top","left"],function(t,e){v.cssHooks[e]=jt(p.pixelPosition,function(t,n){if(n)return n=It(t,e),_t.test(n)?v(t).position()[e]+"px":n})}),v.each({Height:"height",Width:"width"},function(t,e){v.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){v.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return F(this,function(e,n,o){var r;return v.isWindow(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===o?v.css(e,n,a):v.style(e,n,o,a)},e,s?o:void 0,s)}})}),v.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),v.holdReady=function(t){t?v.readyWait++:v.ready(!0)},v.isArray=Array.isArray,v.parseJSON=JSON.parse,v.nodeName=$,"function"==typeof define&&define.amd&&define("jquery",[],function(){return v});var je=t.jQuery,Oe=t.$;return v.noConflict=function(e){return t.$===v&&(t.$=Oe),e&&t.jQuery===v&&(t.jQuery=je),v},e||(t.jQuery=t.$=v),v}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define("uikit",e):t.UIkit=e()}(this,function(){"use strict";var t=2,e="setImmediate"in window?setImmediate:setTimeout;function n(e){this.state=t,this.value=void 0,this.deferred=[];var n=this;try{e(function(t){n.resolve(t)},function(t){n.reject(t)})}catch(t){n.reject(t)}}n.reject=function(t){return new n(function(e,n){n(t)})},n.resolve=function(t){return new n(function(e,n){e(t)})},n.all=function(t){return new n(function(e,i){var o=0,r=[];0===t.length&&e(r);function s(n){return function(i){r[n]=i,(o+=1)===t.length&&e(r)}}for(var a=0;a<t.length;a+=1)n.resolve(t[a]).then(s(a),i)})},n.race=function(t){return new n(function(e,i){for(var o=0;o<t.length;o+=1)n.resolve(t[o]).then(e,i)})};var i=n.prototype;i.resolve=function(e){var n=this;if(n.state===t){if(e===n)throw new TypeError("Promise settled with itself.");var i=!1;try{var o=e&&e.then;if(null!==e&&M(e)&&E(o))return void o.call(e,function(t){i||n.resolve(t),i=!0},function(t){i||n.reject(t),i=!0})}catch(t){return void(i||n.reject(t))}n.state=0,n.value=e,n.notify()}},i.reject=function(e){if(this.state===t){if(e===this)throw new TypeError("Promise settled with itself.");this.state=1,this.value=e,this.notify()}},i.notify=function(){var n=this;e(function(){if(n.state!==t)for(;n.deferred.length;){var e=n.deferred.shift(),i=e[0],o=e[1],r=e[2],s=e[3];try{0===n.state?E(i)?r(i.call(void 0,n.value)):r(n.value):1===n.state&&(E(o)?r(o.call(void 0,n.value)):s(n.value))}catch(t){s(t)}}})},i.then=function(t,e){var i=this;return new n(function(n,o){i.deferred.push([t,e,n,o]),i.notify()})},i.catch=function(t){return this.then(void 0,t)};function o(t,e){return function(n){var i=arguments.length;return i?i>1?t.apply(e,arguments):t.call(e,n):t.call(e)}}var r=Object.prototype.hasOwnProperty;function s(t,e){return r.call(t,e)}var a="Promise"in window?window.Promise:n,l=/(?:^|[-_\/])(\w)/g;function c(t){return t.replace(l,function(t,e){return e?e.toUpperCase():""})}var h=/([a-z\d])([A-Z])/g;function u(t){return t.replace(h,"$1-$2").toLowerCase()}var d=/-(\w)/g;function f(t){return t.replace(d,p)}function p(t,e){return e?e.toUpperCase():""}function g(t){return t.length?p(0,t.charAt(0))+t.slice(1):""}var v=String.prototype,m=v.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function w(t,e){return m.call(t,e)}var y=v.endsWith||function(t){return this.substr(-1*t.length)===t};function x(t,e){return y.call(t,e)}var b=function(t){return~this.indexOf(t)},C=v.includes||b,k=Array.prototype.includes||b;function L(t,e){return t&&(D(t)?C:k).call(t,e)}var T=Array.isArray;function E(t){return"function"==typeof t}function M(t){return null!==t&&"object"==typeof t}function S(t){return M(t)&&Object.getPrototypeOf(t)===Object.prototype}function A(t){return M(t)&&t===t.window}function B(t){return M(t)&&9===t.nodeType}function N(t){return"boolean"==typeof t}function D(t){return"string"==typeof t}function _(t){return"number"==typeof t}function H(t){return _(t)||D(t)&&!isNaN(t-parseFloat(t))}function I(t){return void 0===t}function j(t){return N(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function O(t){var e=Number(t);return!isNaN(e)&&e}function P(t){return parseFloat(t)||0}function q(t){return T(t)?t:D(t)?t.split(/,(?![^(]*\))/).map(function(t){return H(t)?O(t):j(t.trim())}):[t]}var z={};function F(t){if(D(t))if("@"===t[0]){var e="media-"+t.substr(1);t=z[e]||(z[e]=P(me(e)))}else if(isNaN(t))return t;return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}function R(t,e,n){return t===Boolean?j(e):t===Number?O(e):"query"===t?qt(e,n):"list"===t?q(e):"media"===t?F(e):t?t(e):e}function W(t){return t?x(t,"ms")?P(t):1e3*P(t):0}function Z(t,e,n){return t.replace(new RegExp(e+"|"+n,"mg"),function(t){return t===e?n:e})}var V=Object.assign||function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];t=Object(t);for(var i=0;i<e.length;i++){var o=e[i];if(null!==o)for(var r in o)s(o,r)&&(t[r]=o[r])}return t};function U(t,e){for(var n in t)if(!1===e.call(t[n],t[n],n))break}function Y(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),Math.min(Math.max(t,e),n)}function X(){}function G(t,e){return t.left<=e.right&&e.left<=t.right&&t.top<=e.bottom&&e.top<=t.bottom}function J(t,e){return G({top:t.y,bottom:t.y,left:t.x,right:t.x},e)}function Q(t,e){return new a(function(n,i){var o=V({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:X,responseType:""},e),r=o.xhr;o.beforeSend(o);for(var s in o)if(s in r)try{r[s]=o[s]}catch(t){}r.open(o.method.toUpperCase(),t);for(var a in o.headers)r.setRequestHeader(a,o.headers[a]);Ue(r,"load",function(){0===r.status||r.status>=200&&r.status<300||304===r.status?n(r):i(V(Error(r.statusText),{xhr:r,status:r.status}))}),Ue(r,"error",function(){return i(V(Error("Network Error"),{xhr:r}))}),Ue(r,"timeout",function(){return i(V(Error("Network Timeout"),{xhr:r}))}),r.send(o.data)})}var K=window,tt=document,et=tt.documentElement,nt="rtl"===ae(et,"dir");function it(){return"complete"===tt.readyState||"loading"!==tt.readyState&&!et.doScroll}function ot(t){if(it())t();else var e=function(){n(),i(),t()},n=Ue(tt,"DOMContentLoaded",e),i=Ue(K,"load",e)}var rt="transitioncanceled";function st(t,e,n,i){return void 0===n&&(n=400),void 0===i&&(i="linear"),a.all(oe(t).map(function(t){return new a(function(o,r){for(var s in e){var a=fe(t,s);""===a&&fe(t,s,a)}var l=setTimeout(function(){return Ge(t,Re)},n);Xe(t,Re+" "+rt,function(e){var n=e.type;clearTimeout(l),$e(t,"uk-transition"),fe(t,"transition",""),n===rt?r():o()},!1,function(e){var n=e.target;return t===n}),Te(t,"uk-transition"),fe(t,V({transition:"all "+n+"ms "+i},e))})}))}var at={start:st,stop:function(t){return Ge(t,Re),a.resolve()},cancel:function(t){Ge(t,rt)},inProgress:function(t){return Se(t,"uk-transition")}},lt="animationcancel",ct="uk-animation-",ht="uk-cancel-animation";function ut(t,e,n,i,o){var r=arguments;return void 0===n&&(n=200),a.all(oe(t).map(function(t){return new a(function(s,l){if(Se(t,ht))_e(function(){return a.resolve().then(function(){return ut.apply(null,r).then(s,l)})});else{var c=e+" "+ct+(o?"leave":"enter");w(e,ct)&&(i&&(c+=" "+ct+i),o&&(c+=" "+ct+"reverse")),h(),Xe(t,(Ze||"animationend")+" "+lt,function(e){var n=!1;e.type===lt?(l(),h()):(s(),a.resolve().then(function(){n=!0,h()})),_e(function(){n||(Te(t,ht),_e(function(){return $e(t,ht)}))})},!1,function(e){var n=e.target;return t===n}),fe(t,"animationDuration",n+"ms"),Te(t,c),Ze||_e(function(){return ft.cancel(t)})}function h(){fe(t,"animationDuration",""),Ee(t,ct+"\\S*")}})}))}var dt=new RegExp(ct+"(enter|leave)"),ft={in:function(t,e,n,i){return ut(t,e,n,i,!1)},out:function(t,e,n,i){return ut(t,e,n,i,!0)},inProgress:function(t){return dt.test(ae(t,"class"))},cancel:function(t){Ge(t,lt)}};function pt(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),G(ie(t).getBoundingClientRect(),{top:e,left:n,bottom:e+xn(K),right:n+bn(K)})}function gt(t,e,n){void 0===n&&(n=0);var i=(e=oe(e)).length;return(t=(H(t)?O(t):"next"===t?n+1:"previous"===t?n-1:Ht(e,t))%i)<0?t+i:t}var vt={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function mt(t){return vt[ie(t).tagName.toLowerCase()]}var wt={ratio:function(t,e,n){var i="width"===e?"height":"width";return(o={})[i]=Math.round(n*t[i]/t[e]),o[e]=n,o;var o},contain:function(t,e){var n=this;return U(t=V({},t),function(i,o){return t=t[o]>e[o]?n.ratio(t,o,e[o]):t}),t},cover:function(t,e){var n=this;return U(t=this.contain(t,e),function(i,o){return t=t[o]<e[o]?n.ratio(t,o,e[o]):t}),t}};function yt(t){return oe(t).some(function(t){return t.offsetHeight})}var xt="input,select,textarea,button";function bt(t){return oe(t).some(function(t){return Gt(t,xt)})}function Ct(t){return(t=ie(t)).innerHTML="",t}function kt(t,e){return t=ie(t),I(e)?t.innerHTML:Lt(t.hasChildNodes()?Ct(t):t,e)}function Lt(t,e){return t=ie(t),Et(e,function(e){return t.appendChild(e)})}function Tt(t,e){return t=ie(t),Et(e,function(e){return t.parentNode.insertBefore(e,t)})}function $t(t,e){return t=ie(t),Et(e,function(e){return t.nextSibling?Tt(t.nextSibling,e):Lt(t.parentNode,e)})}function Et(t,e){return"length"in(t=D(t)?_t(t):t)?oe(t).map(e):e(t)}function Mt(t){oe(t).map(function(t){return t.parentNode&&t.parentNode.removeChild(t)})}function St(t,e){for(e=ie(Tt(t,e));e.firstChild;)e=e.firstChild;return Lt(e,t),e}function At(t,e){return oe(oe(t).map(function(t){return t.hasChildNodes?St(oe(t.childNodes),e):Lt(t,e)}))}function Bt(t){oe(t).map(function(t){return t.parentNode}).filter(function(t,e,n){return n.indexOf(t)===e}).forEach(function(t){Tt(t,t.childNodes),Mt(t)})}var Nt=/^\s*<(\w+|!)[^>]*>/,Dt=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function _t(t){var e;if(e=Dt.exec(t))return tt.createElement(e[1]);var n=tt.createElement("div");return Nt.test(t)?n.insertAdjacentHTML("beforeend",t.trim()):n.textContent=t,n.childNodes.length>1?oe(n.childNodes):n.firstChild}function Ht(t,e){return e?oe(t).indexOf(ie(e)):oe((t=ie(t))&&t.parentNode.children).indexOf(t)}var It=Array.prototype;function jt(t,e){return D(t)?Pt(t)?ie(_t(t)):ie(Ft(t,e,"querySelector")):ie(t)}function Ot(t,e){return D(t)?Pt(t)?oe(_t(t)):oe(Ft(t,e,"querySelectorAll")):oe(t)}function Pt(t){return"<"===t[0]||t.match(/^\s*</)}function qt(t,e){return jt(t,Ut(t)?e:tt)}function zt(t,e){return Ot(t,Ut(t)?e:tt)}function Ft(t,e,n){if(void 0===e&&(e=tt),!t||!D(t))return null;var i;Ut(t=t.replace(Vt,"$1 *"))&&(i=[],t=t.split(",").map(function(t,n){var o=e;if("!"===(t=t.trim())[0]){var r=t.substr(1).trim().split(" ");o=Qt(e.parentNode,r[0]),t=r.slice(1).join(" ")}return o?(o.id||(o.id="uk-"+Date.now()+n,i.push(function(){return ce(o,"id")})),"#"+se(o.id)+" "+t):null}).filter(Boolean).join(","),e=tt);try{return e[n](t)}catch(t){return null}finally{i&&i.forEach(function(t){return t()})}}function Rt(t,e){return Ot(t).filter(function(t){return Gt(t,e)})}function Wt(t,e){return D(e)?Gt(t,e)||Qt(t,e):t===e||ie(e).contains(ie(t))}var Zt=/(^|,)\s*[!>+~]/,Vt=/([!>+~])(?=\s+[!>+~]|\s*$)/g;function Ut(t){return D(t)&&t.match(Zt)}var Yt=Element.prototype,Xt=Yt.matches||Yt.msMatchesSelector;function Gt(t,e){return oe(t).some(function(t){return Xt.call(t,e)})}var Jt=Yt.closest||function(t){var e=this;do{if(Gt(e,t))return e;e=e.parentNode}while(e&&1===e.nodeType)};function Qt(t,e){return w(e,">")&&(e=e.slice(1)),ee(t)?t.parentNode&&Jt.call(t,e):oe(t).map(function(t){return t.parentNode&&Jt.call(t,e)}).filter(Boolean)}function Kt(t,e){for(var n=[],i=ie(t).parentNode;i&&1===i.nodeType;)Gt(i,e)&&n.push(i),i=i.parentNode;return n}function te(t){return M(t)&&!!t.jquery}function ee(t){return t instanceof Node||M(t)&&1===t.nodeType}function ne(t){return t instanceof NodeList||t instanceof HTMLCollection}function ie(t){return ee(t)||A(t)||B(t)?t:ne(t)||te(t)?t[0]:T(t)?ie(t[0]):null}function oe(t){return ee(t)?[t]:ne(t)?It.slice.call(t):T(t)?t.map(ie).filter(Boolean):te(t)?t.toArray():[]}var re=K.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,function(t){return"\\"+t})};function se(t){return D(t)?re.call(null,t):""}function ae(t,e,n){if(M(e))for(var i in e)ae(t,i,e[i]);else{if(I(n))return(t=ie(t))&&t.getAttribute(e);oe(t).forEach(function(t){E(n)&&(n=n.call(t,ae(t,e))),null===n?ce(t,e):t.setAttribute(e,n)})}}function le(t,e){return oe(t).some(function(t){return t.hasAttribute(e)})}function ce(t,e){t=oe(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.removeAttribute(e)})})}function he(t,e,n,i){ae(t,e,function(t){return t?t.replace(n,i):t})}function ue(t,e){for(var n=0,i=[e,"data-"+e];n<i.length;n++)if(le(t,i[n]))return ae(t,i[n])}var de={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,widows:!0,"z-index":!0,zoom:!0};function fe(t,e,n){return oe(t).map(function(t){if(D(e)){if(e=ye(e),I(n))return ge(t,e);n||0===n?t.style[e]=H(n)&&!de[e]?n+"px":n:t.style.removeProperty(e)}else{if(T(e)){var i=pe(t);return e.reduce(function(t,e){return t[e]=ye(i[e]),t},{})}M(e)&&U(e,function(e,n){return fe(t,n,e)})}return t})[0]}function pe(t,e){return(t=ie(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function ge(t,e,n){return pe(t,n)[e]}var ve={};function me(t){if(!(t in ve)){var e=Lt(et,tt.createElement("div"));Te(e,"var-"+t);try{ve[t]=ge(e,"content",":before").replace(/^["'](.*)["']$/,"$1"),ve[t]=JSON.parse(ve[t])}catch(t){}et.removeChild(e)}return ve[t]}var we={};function ye(t){var e=we[t];return e||(e=we[t]=function(t){if((t=u(t))in be)return t;var e,n=xe.length;for(;n--;)if((e="-"+xe[n]+t)in be)return e}(t)||t),e}var xe=["webkit","moz","ms"],be=tt.createElement("div").style;var Ce,ke,Le;function Te(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];Be(t,e,"add")}function $e(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];Be(t,e,"remove")}function Ee(t,e){he(t,"class",new RegExp("(^|\\s)"+e+"(?!\\S)","g"),"")}function Me(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];e[0]&&$e(t,e[0]),e[1]&&Te(t,e[1])}function Se(t,e){return Ce&&oe(t).some(function(t){return t.classList.contains(e)})}function Ae(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(Ce&&e.length){var i=D((e=Ne(e))[e.length-1])?void 0:e.pop();oe(t).forEach(function(t){for(var n=t.classList,o=0;o<e.length;o++)Le?n.toggle(e[o],i):n[(I(i)?!n.contains(e[o]):i)?"add":"remove"](e[o])})}}function Be(t,e,n){e=Ne(e).filter(function(t){return t}),Ce&&e.length&&oe(t).forEach(function(t){var i=t.classList;ke?i[n].apply(i,e):e.forEach(function(t){return i[n](t)})})}function Ne(t){return t.reduce(function(t,e){return t.push.apply(t,D(e)&&L(e," ")?e.trim().split(" "):[e]),t},[])}!function(){var t=tt.createElement("_").classList;t&&(t.add("a","b"),t.toggle("c",!1),ke=t.contains("b"),Le=!t.contains("c"),Ce=!0),t=null}();var De=K.MutationObserver||K.WebKitMutationObserver,_e=K.requestAnimationFrame||function(t){return setTimeout(t,1e3/60)},He="ontouchstart"in K,Ie=K.PointerEvent,je="ontouchstart"in K||K.DocumentTouch&&tt instanceof DocumentTouch||navigator.msPointerEnabled&&navigator.msMaxTouchPoints||navigator.pointerEnabled&&navigator.maxTouchPoints,Oe=je?"mousedown "+(He?"touchstart":"pointerdown"):"mousedown",Pe=je?"mousemove "+(He?"touchmove":"pointermove"):"mousemove",qe=je?"mouseup "+(He?"touchend":"pointerup"):"mouseup",ze=je&&Ie?"pointerenter":"mouseenter",Fe=je&&Ie?"pointerleave":"mouseleave",Re=Ve("transition","transition-end"),We=Ve("animation","animation-start"),Ze=Ve("animation","animation-end");function Ve(t,e){var n,i=c(t),o=c(e).toLowerCase(),r=c(e),s=tt.body||et,a=(n={},n[t]=o,n["Webkit"+i]="webkit"+r,n["Moz"+i]=o,n["o"+i]="o"+r+" o"+o,n);for(t in a)if(void 0!==s.style[t])return a[t]}function Ue(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Qe(t),i=n[0],o=n[1],r=n[2],s=n[3],a=n[4];i=tn(i),r&&(s=function(t,e,n){var i=this;return function(o){var r=o.target,s=">"===e[0]?Ot(e,t).filter(function(t){return Wt(r,t)})[0]:Qt(r,e);s&&(o.delegate=t,o.current=s,n.call(i,o))}}(i,r,s)),s.length>1&&(l=s,s=function(t){return T(t.detail)?l.apply(l,[t].concat(t.detail)):l(t)});var l;return o.split(" ").forEach(function(t){return i.addEventListener(t,s,a)}),function(){return Ye(i,o,s,a)}}function Ye(t,e,n,i){void 0===i&&(i=!1),e.split(" ").forEach(function(e){return tn(t).removeEventListener(e,n,i)})}function Xe(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Qe(t),i=n[0],o=n[1],r=n[2],s=n[3],a=n[4],l=n[5],c=Ue(i,o,r,function(t){var e=!l||l(t);e&&(c(),s(t,e))},a);return c}function Ge(t,e,n){return en(t).reduce(function(t,i){return t&&i.dispatchEvent(Je(e,!0,!0,n))},!0)}function Je(t,e,n,i){if(void 0===e&&(e=!0),void 0===n&&(n=!1),D(t)){var o=tt.createEvent("CustomEvent");o.initCustomEvent(t,e,n,i),t=o}return t}function Qe(t){return D(t[0])&&(t[0]=jt(t[0])),E(t[2])&&t.splice(2,0,!1),t}function Ke(t){return"EventTarget"in K?t instanceof EventTarget:"addEventListener"in t}function tn(t){return Ke(t)?t:ie(t)}function en(t){return Ke(t)?[t]:T(t)?t.map(tn).filter(Boolean):oe(t)}var nn={reads:[],writes:[],read:function(t){return this.reads.push(t),on(),t},write:function(t){return this.writes.push(t),on(),t},clear:function(t){return sn(this.reads,t)||sn(this.writes,t)},flush:function(){rn(this.reads),rn(this.writes.splice(0,this.writes.length)),this.scheduled=!1,(this.reads.length||this.writes.length)&&on()}};function on(){nn.scheduled||(nn.scheduled=!0,_e(nn.flush.bind(nn)))}function rn(t){for(var e;e=t.shift();)e()}function sn(t,e){var n=t.indexOf(e);return!!~n&&!!t.splice(n,1)}function an(){}an.prototype={positions:[],position:null,init:function(){var t=this;this.positions=[],this.position=null;var e=!1;this.unbind=Ue(tt,"mousemove",function(n){e||(setTimeout(function(){var i=Date.now(),o=t.positions.length;o&&i-t.positions[o-1].time>100&&t.positions.splice(0,o),t.positions.push({time:i,x:n.pageX,y:n.pageY}),t.positions.length>5&&t.positions.shift(),e=!1},5),e=!0)})},cancel:function(){this.unbind&&this.unbind()},movesTo:function(t){if(this.positions.length<2)return!1;var e=mn(t),n=this.positions[this.positions.length-1],i=this.positions[0];if(e.left<=n.x&&n.x<=e.right&&e.top<=n.y&&n.y<=e.bottom)return!1;var o=[[{x:e.left,y:e.top},{x:e.right,y:e.bottom}],[{x:e.right,y:e.top},{x:e.left,y:e.bottom}]];return e.right<=n.x||(e.left>=n.x?(o[0].reverse(),o[1].reverse()):e.bottom<=n.y?o[0].reverse():e.top>=n.y&&o[1].reverse()),!!o.reduce(function(t,e){return t+(ln(i,e[0])<ln(n,e[0])&&ln(i,e[1])>ln(n,e[1]))},0)}};function ln(t,e){return(e.y-t.y)/(e.x-t.x)}var cn={};cn.args=cn.created=cn.events=cn.init=cn.ready=cn.connected=cn.disconnected=cn.destroy=function(t,e){return t=t&&!T(t)?[t]:t,e?t?t.concat(e):T(e)?e:[e]:t},cn.update=function(t,e){return cn.args(t,E(e)?{read:e}:e)},cn.props=function(t,e){return T(e)&&(e=e.reduce(function(t,e){return t[e]=String,t},{})),cn.methods(t,e)},cn.computed=cn.defaults=cn.methods=function(t,e){return e?t?V({},t,e):e:t};var hn=function(t,e){return I(e)?t:e};function un(t,e){var n,i={};if(e.mixins)for(var o=0,r=e.mixins.length;o<r;o++)t=un(t,e.mixins[o]);for(n in t)a(n);for(n in e)s(t,n)||a(n);function a(n){i[n]=(cn[n]||hn)(t[n],e[n])}return i}var dn=0,fn=function(t){this.id=++dn,this.el=ie(t)};fn.prototype.isVideo=function(){return this.isYoutube()||this.isVimeo()||this.isHTML5()},fn.prototype.isHTML5=function(){return"VIDEO"===this.el.tagName},fn.prototype.isIFrame=function(){return"IFRAME"===this.el.tagName},fn.prototype.isYoutube=function(){return this.isIFrame()&&!!this.el.src.match(/\/\/.*?youtube\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)},fn.prototype.isVimeo=function(){return this.isIFrame()&&!!this.el.src.match(/vimeo\.com\/video\/.*/)},fn.prototype.enableApi=function(){var t=this;if(this.ready)return this.ready;var e,n=this.isYoutube(),i=this.isVimeo();return n||i?this.ready=new a(function(o){Xe(t.el,"load",function(){if(n){var i=function(){return pn(t.el,{event:"listening",id:t.id})};e=setInterval(i,100),i()}}),(r=function(e){return n&&e.id===t.id&&"onReady"===e.event||i&&Number(e.player_id)===t.id},new a(function(t){Xe(K,"message",function(e,n){return t(n)},!1,function(t){var e=t.data;if(e&&D(e)){try{e=JSON.parse(e)}catch(t){return}return e&&r(e)}})})).then(function(){o(),e&&clearInterval(e)});var r;ae(t.el,"src",t.el.src+(L(t.el.src,"?")?"&":"?")+(n?"enablejsapi=1":"api=1&player_id="+dn))}):a.resolve()},fn.prototype.play=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return pn(t.el,{func:"playVideo",method:"play"})}):this.isHTML5()&&this.el.play())},fn.prototype.pause=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return pn(t.el,{func:"pauseVideo",method:"pause"})}):this.isHTML5()&&this.el.pause())},fn.prototype.mute=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return pn(t.el,{func:"mute",method:"setVolume",value:0})}):this.isHTML5()&&(this.el.muted=!0,ae(this.el,"muted","")))};function pn(t,e){try{t.contentWindow.postMessage(JSON.stringify(V({event:"command"},e)),"*")}catch(t){}}var gn={width:["x","left","right"],height:["y","top","bottom"]};function vn(t,e,n,i,o,r,s,a){n=$n(n),i=$n(i);var l={element:n,target:i};if(!t||!e)return l;var c=wn(t),h=wn(e),u=h;return Tn(u,n,c,-1),Tn(u,i,h,1),o=En(o,c.width,c.height),r=En(r,h.width,h.height),o.x+=r.x,o.y+=r.y,u.left+=o.x,u.top+=o.y,a=wn(a||Ln(t)),s&&U(gn,function(t,e){var r=t[0],d=t[1],f=t[2];if(!0===s||L(s,r)){var p=n[r]===d?-c[e]:n[r]===f?c[e]:0,g=i[r]===d?h[e]:i[r]===f?-h[e]:0;if(u[d]<a[d]||u[d]+c[e]>a[f]){var v=c[e]/2,m="center"===i[r]?-h[e]/2:0;"center"===n[r]&&(w(v,m)||w(-v,-m))||w(p,g)}}function w(t,n){var i=u[d]+t+n-2*o[r];if(i>=a[d]&&i+c[e]<=a[f])return u[d]=i,["element","target"].forEach(function(n){l[n][r]=t?l[n][r]===gn[e][1]?gn[e][2]:gn[e][1]:l[n][r]}),!0}}),mn(t,u),l}function mn(t,e){t=ie(t);{if(!e)return wn(t);var n=mn(t),i=fe(t,"position");["left","top"].forEach(function(o){if(o in e){var r=fe(t,o);t.style[o]=e[o]-n[o]+P("absolute"===i&&"auto"===r?yn(t)[o]:r)+"px"}})}}function wn(t){var e=Ln(t=ie(t)),n=e.pageYOffset,i=e.pageXOffset;if(A(t)){var o=t.innerHeight,r=t.innerWidth;return{top:n,left:i,height:o,width:r,bottom:n+o,right:i+r}}var s=!1;yt(t)||(s=t.style.display,t.style.display="block");var a=t.getBoundingClientRect();return!1!==s&&(t.style.display=s),{height:a.height,width:a.width,top:a.top+n,left:a.left+i,bottom:a.bottom+n,right:a.right+i}}function yn(t){var e=function(t){var e=ie(t).offsetParent;for(;e&&"static"===fe(e,"position");)e=e.offsetParent;return e||An(t)}(t=ie(t)),n=e===An(t)?{top:0,left:0}:mn(e);return["top","left"].reduce(function(i,o){var r=g(o);return i[o]-=n[o]+(P(fe(t,"margin"+r))||0)+(P(fe(e,"border"+r+"Width"))||0),i},mn(t))}var xn=Cn("height"),bn=Cn("width");function Cn(t){var e=g(t);return function(n,i){if(n=ie(n),I(i)){if(A(n))return n["inner"+e];if(B(n)){var o=n.documentElement;return Math.max(o.offsetHeight,o.scrollHeight)}return i="auto"===(i=fe(n,t))?n["offset"+e]:P(i)||0,kn(t,n,i)}fe(n,t,i||0===i?kn(t,n,i)+"px":"")}}function kn(t,e,n){return"border-box"===fe(e,"boxSizing")?gn[t].slice(1).map(g).reduce(function(t,n){return t-P(fe(e,"padding"+n))-P(fe(e,"border"+n+"Width"))},n):n}function Ln(t){return A(t)?t:Sn(t).defaultView}function Tn(t,e,n,i){U(gn,function(o,r){var s=o[0],a=o[1],l=o[2];e[s]===l?t[a]+=n[r]*i:"center"===e[s]&&(t[a]+=n[r]*i/2)})}function $n(t){var e=/left|center|right/,n=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat(["center"]):n.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:n.test(t[1])?t[1]:"center"}}function En(t,e,n){var i=(t||"").split(" "),o=i[0],r=i[1];return{x:o?P(o)*(x(o,"%")?e/100:1):0,y:r?P(r)*(x(r,"%")?n/100:1):0}}function Mn(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function Sn(t){return ie(t).ownerDocument}function An(t){return Sn(t).documentElement}var Bn,Nn,Dn,_n,Hn={};function In(){Bn&&clearTimeout(Bn),Nn&&clearTimeout(Nn),Dn&&clearTimeout(Dn),Bn=Nn=Dn=null,Hn={}}ot(function(){Ue(tt,"click",function(){return _n=!0},!0),Ue(tt,Oe,function(t){var e=t.target,n=Pn(t),i=n.x,o=n.y,r=Date.now();Hn.el="tagName"in e?e:e.parentNode,Bn&&clearTimeout(Bn),Hn.x1=i,Hn.y1=o,Hn.last&&r-Hn.last<=250&&(Hn={}),Hn.last=r,_n=t.button>0}),Ue(tt,Pe,function(t){var e=Pn(t),n=e.x,i=e.y;Hn.x2=n,Hn.y2=i}),Ue(tt,qe,function(t){var e=t.target;Hn.x2&&Math.abs(Hn.x1-Hn.x2)>30||Hn.y2&&Math.abs(Hn.y1-Hn.y2)>30?Nn=setTimeout(function(){Hn.el&&(Ge(Hn.el,"swipe"),Ge(Hn.el,"swipe"+function(t){var e=t.x1,n=t.x2,i=t.y1,o=t.y2;return Math.abs(e-n)>=Math.abs(i-o)?e-n>0?"Left":"Right":i-o>0?"Up":"Down"}(Hn))),Hn={}}):"last"in Hn?(Dn=setTimeout(function(){return Hn.el&&Ge(Hn.el,"tap")}),Hn.el&&Wt(e,Hn.el)&&(Bn=setTimeout(function(){Bn=null,Hn.el&&!_n&&Ge(Hn.el,"click"),Hn={}},350))):Hn={}}),Ue(tt,"touchcancel",In),Ue(K,"scroll",In)});var jn=!1;Ue(tt,"touchstart",function(){return jn=!0},!0),Ue(tt,"click",function(){jn=!1}),Ue(tt,"touchcancel",function(){return jn=!1},!0);function On(t){return jn||"touch"===t.pointerType}function Pn(t){var e=t.touches,n=t.changedTouches,i=e&&e[0]||n&&n[0]||t;return{x:i.pageX,y:i.pageY}}var qn=Object.freeze({bind:o,hasOwn:s,Promise:a,classify:c,hyphenate:u,camelize:f,ucfirst:g,startsWith:w,endsWith:x,includes:L,isArray:T,isFunction:E,isObject:M,isPlainObject:S,isWindow:A,isDocument:B,isBoolean:N,isString:D,isNumber:_,isNumeric:H,isUndefined:I,toBoolean:j,toNumber:O,toFloat:P,toList:q,toMedia:F,coerce:R,toMs:W,swap:Z,assign:V,each:U,clamp:Y,noop:X,intersectRect:G,pointInRect:J,ajax:Q,$:jt,$$:Ot,query:qt,queryAll:zt,filter:Rt,within:Wt,matches:Gt,closest:Qt,parents:Kt,isJQuery:te,toNode:ie,toNodes:oe,escape:se,attr:ae,hasAttr:le,removeAttr:ce,filterAttr:he,data:ue,win:K,doc:tt,docEl:et,isRtl:nt,isReady:it,ready:ot,transition:st,Transition:at,animate:ut,Animation:ft,isInView:pt,scrolledOver:function(t){var e=(t=ie(t)).offsetHeight,n=function(t){var e=0;do{e+=t.offsetTop}while(t=t.offsetParent);return e}(t),i=xn(K),o=i+Math.min(0,n-i),r=Math.max(0,i-(xn(tt)-(n+e)));return Y((o+K.pageYOffset-n)/((o+(e-(r<i?r:0)))/100)/100)},getIndex:gt,isVoidElement:mt,Dimensions:wt,preventClick:function(){var t=setTimeout(function(){return Ge(tt,"click")},0);Xe(tt,"click",function(e){e.preventDefault(),e.stopImmediatePropagation(),clearTimeout(t)},!0)},isVisible:yt,selInput:xt,isInput:bt,empty:Ct,html:kt,prepend:function(t,e){return(t=ie(t)).hasChildNodes()?Et(e,function(e){return t.insertBefore(e,t.firstChild)}):Lt(t,e)},append:Lt,before:Tt,after:$t,remove:Mt,wrapAll:St,wrapInner:At,unwrap:Bt,fragment:_t,index:Ht,css:fe,getStyles:pe,getStyle:ge,getCssVar:me,addClass:Te,removeClass:$e,removeClasses:Ee,replaceClass:Me,hasClass:Se,toggleClass:Ae,Observer:De,requestAnimationFrame:_e,hasTouch:je,pointerDown:Oe,pointerMove:Pe,pointerUp:qe,pointerEnter:ze,pointerLeave:Fe,transitionend:Re,animationstart:We,animationend:Ze,getImage:function(t){return new a(function(e,n){var i=new Image;i.onerror=n,i.onload=function(){return e(i)},i.src=t})},on:Ue,off:Ye,once:Xe,trigger:Ge,createEvent:Je,toEventTargets:en,fastdom:nn,MouseTracker:an,mergeOptions:un,Player:fn,positionAt:vn,offset:mn,position:yn,height:xn,width:bn,flipPosition:Mn,isTouch:On,getPos:Pn}),zn=function(t){this._init(t)};zn.util=qn,zn.data="__uikit__",zn.prefix="uk-",zn.options={},zn.instances={},zn.elements=[],function(t){var e=t.data;t.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},t.mixin=function(e,n){n=(D(n)?t.components[n]:n)||this,(e=un({},e)).mixins=n.options.mixins,delete n.options.mixins,n.options=un(e,n.options)},t.extend=function(t){var e,n=(t=t||{}).name||this.options.name,i=(e=n||"UIkitComponent",new Function("return function "+c(e)+" (options) { this._init(options); }")());return i.prototype=Object.create(this.prototype),i.prototype.constructor=i,i.options=un(this.options,t),i.super=this,i.extend=this.extend,i},t.update=function(n,o,r){if(void 0===r&&(r=!1),n=Je(n||"update"),o)if(o=ie(o),r)do{i(o[e],n),o=o.parentNode}while(o);else!function t(e,n){if(1===e.nodeType)for(n(e),e=e.firstElementChild;e;)t(e,n),e=e.nextElementSibling}(o,function(t){return i(t[e],n)});else i(t.instances,n)};var n;Object.defineProperty(t,"container",{get:function(){return n||tt.body},set:function(t){n=t}});function i(t,e){if(t)for(var n in t)t[n]._isReady&&t[n]._callUpdate(e)}}(zn),(Fn=zn).prototype._callHook=function(t){var e=this,n=this.$options[t];n&&n.forEach(function(t){return t.call(e)})},Fn.prototype._callReady=function(){this._isReady||(this._isReady=!0,this._callHook("ready"),this._resetComputeds(),this._callUpdate())},Fn.prototype._callConnected=function(){var t=this;this._connected||(L(Fn.elements,this.$options.el)||Fn.elements.push(this.$options.el),Fn.instances[this._uid]=this,this._initEvents(),this._callHook("connected"),this._connected=!0,this._initObserver(),this._isReady||ot(function(){return t._callReady()}),this._callUpdate())},Fn.prototype._callDisconnected=function(){if(this._connected){this._observer&&(this._observer.disconnect(),this._observer=null);var t=Fn.elements.indexOf(this.$options.el);~t&&Fn.elements.splice(t,1),delete Fn.instances[this._uid],this._unbindEvents(),this._callHook("disconnected"),this._connected=!1}},Fn.prototype._callUpdate=function(t){var e=this,n=(t=Je(t||"update")).type,i=t.detail;"update"===n&&i&&i.mutation&&this._resetComputeds();var o=this.$options.update,r=this._frames,s=r.reads,a=r.writes;o&&o.forEach(function(i,o){var r=i.read,l=i.write,c=i.events;("update"===n||L(c,n))&&(r&&!L(nn.reads,s[o])&&(s[o]=nn.read(function(){!1===r.call(e,t)&&l&&(nn.clear(a[o]),delete a[o]),delete s[o]})),l&&!L(nn.writes,a[o])&&(a[o]=nn.write(function(){l.call(e,t),delete a[o]})))})};var Fn;!function(t){var e=0;t.prototype.props={},t.prototype._init=function(n){n=n||{},n=this.$options=un(this.constructor.options,n),this.$el=null,this.$name=t.prefix+u(this.$options.name),this.$props={},this._frames={reads:{},writes:{}},this._events=[],this._uid=e++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),n.el&&this.$mount(n.el)},t.prototype._initData=function(){var t=this.$options,e=t.defaults,n=t.data;void 0===n&&(n={});var i=t.args;void 0===i&&(i=[]);var o=t.props;void 0===o&&(o={});var r=t.el;i.length&&T(n)&&(n=n.slice(0,i.length).reduce(function(t,e,n){return S(e)?V(t,e):t[i[n]]=e,t},{}));for(var a in e)this.$props[a]=this[a]=s(n,a)&&!I(n[a])?R(o[a],n[a],r):T(e[a])?e[a].concat():e[a]},t.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=o(t[e],this)},t.prototype._initComputeds=function(){var t=this.$options.computed;if(this._resetComputeds(),t)for(var e in t)i(this,e,t[e])},t.prototype._resetComputeds=function(){this._computeds={}},t.prototype._initProps=function(t){this._resetComputeds(),V(this.$props,t||n(this.$options,this.$name));var e=[this.$options.computed,this.$options.methods];for(var i in this.$props)a(e,i)&&(this[i]=this.$props[i])},t.prototype._initEvents=function(){var t=this,e=this.$options.events;e&&e.forEach(function(e){if(s(e,"handler"))r(t,e);else for(var n in e)r(t,e[n],n)})},t.prototype._unbindEvents=function(){this._events.forEach(function(t){return t()}),this._events=[]},t.prototype._initObserver=function(){var t=this,e=this.$options,i=e.attrs,o=e.props,r=e.el;!this._observer&&o&&i&&De&&(i=T(i)?i:Object.keys(o).map(function(t){return u(t)}),this._observer=new De(function(){var e=n(t.$options,t.$name);i.some(function(n){return!I(e[n])&&e[n]!==t.$props[n]})&&t.$reset(e)}),this._observer.observe(r,{attributes:!0,attributeFilter:i.concat([this.$name,"data-"+this.$name])}))};function n(t,e){var n={},i=t.args;void 0===i&&(i=[]);var o=t.props;void 0===o&&(o={});var r,s,a=t.el;if(!o)return n;for(r in o)if(le(a,s=u(r))){var l=R(o[r],ae(a,s),a);if("target"===s&&(!l||w(l,"_")))continue;n[r]=l}var c=function(t,e){void 0===e&&(e=[]);try{return t?w(t,"{")?JSON.parse(t):e.length&&!L(t,":")?((n={})[e[0]]=t,n):t.split(";").reduce(function(t,e){var n=e.split(/:(.+)/),i=n[0],o=n[1];return i&&o&&(t[i.trim()]=o.trim()),t},{}):{};var n}catch(t){return{}}}(ue(a,e),i);for(r in c)void 0!==o[s=f(r)]&&(n[s]=R(o[s],c[r],a));return n}function i(t,e,n){Object.defineProperty(t,e,{enumerable:!0,get:function(){var i=t._computeds,o=t.$props,r=t.$el;return s(i,e)||(i[e]=n.call(t,o,r)),i[e]},set:function(n){t._computeds[e]=n}})}function r(t,e,n){S(e)||(e={name:n,handler:e});var i=e.name,s=e.el,a=e.delegate,l=e.self,c=e.filter,h=e.handler;if(s=E(s)?s.call(t):s||t.$el,T(s))s.forEach(function(i){return r(t,V({},e,{el:i}),n)});else if(s&&(!c||c.call(t))){u=D(h)?t[h]:o(h,t),h=function(t){return T(t.detail)?u.apply(u,[t].concat(t.detail)):u(t)};var u;l&&(d=h,h=function(t){if(t.target===t.currentTarget||t.target===t.current)return d.call(null,t)});var d;t._events.push(Ue(s,i,a?D(a)?a:a.call(t):null,h))}}function a(t,e){return t.every(function(t){return!t||!s(t,e)})}}(zn),function(t){var e=t.data;t.prototype.$mount=function(t){var n=this.$options.name;t[e]||(t[e]={}),t[e][n]||(t[e][n]=this,this.$el=this.$options.el=this.$options.el||t,this._initProps(),this._callHook("init"),Wt(t,et)&&this._callConnected())},t.prototype.$emit=function(t){this._callUpdate(t)},t.prototype.$update=function(e,n){t.update(e,this.$options.el,n)},t.prototype.$reset=function(t){this._callDisconnected(),this._initProps(t),this._callConnected()},t.prototype.$destroy=function(t){void 0===t&&(t=!1);var n=this.$options,i=n.el,o=n.name;i&&this._callDisconnected(),this._callHook("destroy"),i&&i[e]&&(delete i[e][o],Object.keys(i[e]).length||delete i[e],t&&Mt(this.$el))}}(zn),function(t){var e=t.data;t.components={},t.component=function(e,n){var i=f(e);if(S(n))n.name=i,n=t.extend(n);else{if(I(n))return t.components[i];n.options.name=i}return t.components[i]=n,t[i]=function(e,n){for(var o=arguments.length,r=Array(o);o--;)r[o]=arguments[o];return S(e)?new t.components[i]({data:e}):t.components[i].options.functional?new t.components[i]({data:[].concat(r)}):e&&e.nodeType?s(e):Ot(e).map(s)[0];function s(e){return t.getComponent(e,i)||new t.components[i]({el:e,data:n||{}})}},t._initialized&&!n.options.functional&&nn.read(function(){return t[i]("[uk-"+e+"],[data-uk-"+e+"]")}),t.components[i]},t.getComponents=function(t){return t&&(t=te(t)?t[0]:t)&&t[e]||{}},t.getComponent=function(e,n){return t.getComponents(e)[n]},t.connect=function(n){var i;if(n[e])for(i in n[e])n[e][i]._callConnected();for(var o=0;o<n.attributes.length;o++)(w(i=n.attributes[o].name,"uk-")||w(i,"data-uk-"))&&(i=f(i.replace("data-uk-","").replace("uk-","")),t[i]&&t[i](n))},t.disconnect=function(t){for(var n in t[e])t[e][n]._callDisconnected()}}(zn);var Rn,Wn,Zn={init:function(){Te(this.$el,this.$name)}},Vn={props:{container:Boolean},defaults:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&zn.container||e&&$(e)||zn.container}}},Un={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String,queued:Boolean},defaults:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",queued:!1,initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,e,n){var i=this;return new a(function(o){var r,s=function(t){return a.all(t.map(function(t){return i._toggleElement(t,e,n)}))},l=(t=oe(t)).filter(function(t){return i.isToggled(t)}),c=t.filter(function(t){return!L(l,t)});if(i.queued&&I(n)&&I(e)&&i.hasAnimation&&!(t.length<2)){var h=tt.body,u=h.scrollTop,d=l[0],f=ft.inProgress(d)&&Se(d,"uk-animation-leave")||at.inProgress(d)&&"0px"===d.style.height;r=s(l),f||(r=r.then(function(){var t=s(c);return h.scrollTop=u,t}))}else r=s(c.concat(l));r.then(o,X)})},toggleNow:function(t,e){var n=this;return new a(function(i){return a.all(oe(t).map(function(t){return n._toggleElement(t,e,!1)})).then(i,X)})},isToggled:function(t){var e=oe(t||this.$el);return this.cls?Se(e,this.cls.split(" ")[0]):!le(e,"hidden")},updateAria:function(t){!1===this.cls&&ae(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,n){var i=this;if(e=N(e)?e:ft.inProgress(t)?Se(t,"uk-animation-leave"):at.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!Ge(t,"before"+(e?"show":"hide"),[this]))return a.reject();var o=(!1!==n&&this.hasAnimation?this.hasTransition?this._toggleHeight:this._toggleAnimation:this._toggleImmediate)(t,e);return Ge(t,e?"show":"hide",[this]),o.then(function(){Ge(t,e?"shown":"hidden",[i]),zn.update(null,t)})},_toggle:function(t,e){t&&(this.cls?Ae(t,this.cls,L(this.cls," ")?void 0:e):ae(t,"hidden",e?null:""),Ot("[autofocus]",t).some(function(t){return yt(t)&&(t.focus()||!0)}),this.updateAria(t),zn.update(null,t))},_toggleImmediate:function(t,e){return this._toggle(t,e),a.resolve()},_toggleHeight:function(t,e){var n,i=this,o=at.inProgress(t),r=t.hasChildNodes?P(fe(t.firstElementChild,"marginTop"))+P(fe(t.lastElementChild,"marginBottom")):0,s=yt(t)?xn(t)+(o?0:r):0;return at.cancel(t),this.isToggled(t)||this._toggle(t,!0),xn(t,""),nn.flush(),n=xn(t)+(o?0:r),xn(t,s),(e?at.start(t,V({},this.initProps,{overflow:"hidden",height:n}),Math.round(this.duration*(1-s/n)),this.transition):at.start(t,this.hideProps,Math.round(this.duration*(s/n)),this.transition).then(function(){return i._toggle(t,!1)})).then(function(){return fe(t,i.initProps)})},_toggleAnimation:function(t,e){var n=this;return ft.cancel(t),e?(this._toggle(t,!0),ft.in(t,this.animation[0],this.duration,this.origin)):ft.out(t,this.animation[1]||this.animation[0],this.duration,this.origin).then(function(){return n._toggle(t,!1)})}}},Yn={mixins:[Zn,Vn,Un],props:{clsPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},defaults:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return jt("."+t.clsPanel,e)},transitionElement:function(){return this.panel},transitionDuration:function(){return W(fe(this.transitionElement,"transitionDuration"))}},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.toggle())}},{name:"show",self:!0,handler:function(){Se(et,this.clsPage)||(this.scrollbarWidth=bn(K)-et.offsetWidth,fe(tt.body,"overflowY",this.scrollbarWidth&&this.overlay?"scroll":"")),Te(et,this.clsPage)}},{name:"hidden",self:!0,handler:function(){for(var t,e=this.prev;e;){if(e.clsPage===this.clsPage){t=!0;break}e=e.prev}t||$e(et,this.clsPage),!this.prev&&fe(tt.body,"overflowY","")}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){if(!this.isToggled()){this.container&&this.$el.parentNode!==this.container&&(Lt(this.container,this.$el),this._callConnected());var t=Rn&&Rn!==this&&Rn;if(Rn=this,t){if(!this.stack)return void t.hide().then(this.show);this.prev=t}return function(){if(Wn)return;Wn=[Ue(et,"click",function(t){var e=t.target,n=t.defaultPrevented;Rn&&Rn.bgClose&&!n&&!Wt(e,Rn.panel)&&Rn.hide()}),Ue(tt,"keydown",function(t){27===t.keyCode&&Rn&&Rn.escClose&&(t.preventDefault(),Rn.hide())})]}(),this.toggleNow(this.$el,!0)}},hide:function(){if(this.isToggled())return(Rn=Rn&&Rn!==this&&Rn||this.prev)||(Wn&&Wn.forEach(function(t){return t()}),Wn=null),this.toggleNow(this.$el,!1)},getActive:function(){return Rn},_toggleImmediate:function(t,e){var n=this;return new a(function(i){return _e(function(){n._toggle(t,e),n.transitionDuration?Xe(n.transitionElement,Re,i,!1,function(t){return t.target===n.transitionElement}):i()})})}}};var Xn,Gn={props:{pos:String,offset:null,flip:Boolean,clsPos:String},defaults:{pos:"bottom-"+(nt?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(L(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,n){Ee(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?"),fe(t,{top:"",left:""});var i=O(this.offset)||0,o=this.getAxis(),r=vn(t,e,"x"===o?Mn(this.dir)+" "+this.align:this.align+" "+Mn(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-1*i:i):" "+("top"===this.dir?-1*i:i),null,this.flip,n).target,s=r.x,a=r.y;this.dir="x"===o?s:a,this.align="x"===o?a:s,Ae(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}},Jn=function(t){t.component("accordion",{mixins:[Zn,Un],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String},defaults:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease"},computed:{items:function(t,e){return Ot(t.targets,e)}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(Ht(Ot(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],ready:function(){var t=!1!==this.active&&this.items[Number(this.active)]&&!Se(t,this.clsOpen);t&&this.toggle(t,!1)},update:function(){var t=this;this.items.forEach(function(e){return t._toggleImmediate(jt(t.content,e),Se(e,t.clsOpen))});var e=!this.collapsible&&!Se(this.items,this.clsOpen)&&this.items[0];e&&this.toggle(e,!1)},methods:{toggle:function(t,e){var n=this,i=gt(t,this.items),o=Rt(this.items,"."+this.clsOpen);(t=this.items[i])&&[t].concat(!this.multiple&&!L(o,t)&&o||[]).forEach(function(i){var r=i===t,s=r&&!Se(i,n.clsOpen);if(s||!r||n.collapsible||!(o.length<2)){Ae(i,n.clsOpen,s);var a=i._wrapper?i._wrapper.firstElementChild:jt(n.content,i);i._wrapper||(i._wrapper=St(a,"<div>"),ae(i._wrapper,"hidden",s?"":null)),n._toggleImmediate(a,!0),n.toggleElement(i._wrapper,s,e).then(function(){Se(i,n.clsOpen)===s&&(s||n._toggleImmediate(a,!1),i._wrapper=null,Bt(a))})}})}}})},Qn=function(t){t.component("alert",{attrs:!0,mixins:[Zn,Un],args:"animation",props:{close:String},defaults:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:V({opacity:0},Un.defaults.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then(function(){return t.$destroy(!0)})}}})},Kn=function(t){t.component("cover",{mixins:[Zn,t.components.video.options],props:{width:Number,height:Number},defaults:{automute:!0},update:{write:function(){var t=this.$el;if(yt(t)){var e=t.parentNode,n=e.offsetHeight,i=e.offsetWidth;fe(fe(t,{width:"",height:""}),wt.cover({width:this.width||t.clientWidth,height:this.height||t.clientHeight},{width:i+(i%2?1:0),height:n+(n%2?1:0)}))}},events:["load","resize"]},events:{loadedmetadata:function(){this.$emit()}}})},ti=function(t){var e;t.component("drop",{mixins:[Gn,Un],args:"pos",props:{mode:"list",toggle:Boolean,boundary:"query",boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},defaults:{mode:["click","hover"],toggle:!0,boundary:K,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,hoverIdle:200,animation:["uk-animation-fade"],cls:"uk-open"},init:function(){this.tracker=new an,this.clsDrop=this.clsDrop||"uk-"+this.$options.name,this.clsPos=this.clsDrop,Te(this.$el,this.clsDrop)},ready:function(){this.updateAria(this.$el),this.toggle&&(this.toggle=t.toggle(D(this.toggle)?qt(this.toggle,this.$el):this.$el.previousElementSibling,{target:this.$el,mode:this.mode}))},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){if(!t.defaultPrevented){var e=t.target.hash;e||t.preventDefault(),e&&Wt(e,this.$el)||this.hide(!1)}}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:ze,filter:function(){return L(this.mode,"hover")},handler:function(t){On(t)||(e&&e!==this&&e.toggle&&L(e.toggle.mode,"hover")&&!Wt(t.target,e.toggle.$el)&&!J({x:t.pageX,y:t.pageY},mn(e.$el))&&e.hide(!1),t.preventDefault(),this.show(this.toggle))}},{name:"toggleshow",handler:function(t,e){e&&!L(e.target,this.$el)||(t.preventDefault(),this.show(e||this.toggle))}},{name:"togglehide "+Fe,handler:function(t,e){On(t)||e&&!L(e.target,this.$el)||(t.preventDefault(),this.toggle&&L(this.toggle.mode,"hover")&&this.hide())}},{name:"beforeshow",self:!0,handler:function(){this.clearTimers()}},{name:"show",self:!0,handler:function(){this.tracker.init(),Te(this.toggle.$el,this.cls),ae(this.toggle.$el,"aria-expanded","true"),function(){if(n)return;n=!0,Ue(et,"click",function(t){var n,i=t.target,o=t.defaultPrevented;if(!o)for(;e&&e!==n&&!Wt(i,e.$el)&&(!e.toggle||!Wt(i,e.toggle.$el));)n=e,e.hide(!1)})}()}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var n=t.target;this.$el===n?(e=this.isActive()?null:e,$e(this.toggle.$el,this.cls),ae(this.toggle.$el,"aria-expanded","false"),this.toggle.$el.blur(),Ot("a, button",this.toggle.$el).forEach(function(t){return t.blur()}),this.tracker.cancel()):e=null===e&&Wt(n,this.$el)&&this.isToggled()?this:e}}],update:{write:function(){this.isToggled()&&!ft.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,n){var i=this;void 0===n&&(n=!0);var o=function(){i.isToggled()||(i.position(),i.toggleElement(i.$el,!0))},r=function(){if(i.toggle=t||i.toggle,i.clearTimers(),!i.isActive())if(n&&e&&e!==i&&e.isDelaying)i.showTimer=setTimeout(i.show,10);else{if(i.isParentOf(e)){if(!e.hideTimer)return;e.hide(!1)}else if(e&&!i.isChildOf(e)&&!i.isParentOf(e))for(var r;e&&e!==r&&!i.isChildOf(e);)r=e,e.hide(!1);n&&i.delayShow?i.showTimer=setTimeout(o,i.delayShow):o(),e=i}};t&&this.toggle&&t.$el!==this.toggle.$el?(Xe(this.$el,"hide",r),this.hide(!1)):r()},hide:function(t){var e=this;void 0===t&&(t=!0);var n=function(){return e.toggleNow(e.$el,!1)};this.clearTimers(),this.isDelaying=this.tracker.movesTo(this.$el),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,this.hoverIdle):t&&this.delayHide?this.hideTimer=setTimeout(n,this.delayHide):n()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return e===this},isChildOf:function(t){return t&&t!==this&&Wt(this.$el,t.$el)},isParentOf:function(t){return t&&t!==this&&Wt(t.$el,this.$el)},position:function(){Ee(this.$el,this.clsDrop+"-(stack|boundary)"),fe(this.$el,{top:"",left:"",display:"block"}),Ae(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=mn(this.boundary),e=this.boundaryAlign?t:mn(this.toggle.$el);if("justify"===this.align){var n="y"===this.getAxis()?"width":"height";fe(this.$el,n,e[n])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&(Te(this.$el,this.clsDrop+"-stack"),Ge(this.$el,"stack",[this]));this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary),fe(this.$el,"display","")}}}),t.drop.getActive=function(){return e};var n},ei=function(t){t.component("dropdown",t.components.drop.extend({name:"dropdown"}))},ni=function(t){t.component("form-custom",{mixins:[Zn],args:"target",props:{target:Boolean},defaults:{target:!1},computed:{input:function(t,e){return jt(xt,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var n=t.target;return n&&(!0===n&&this.input.parentNode===e&&this.input.nextElementSibling||qt(n,e))}},connected:function(){Ge(this.input,"change")},events:[{name:"focusin focusout mouseenter mouseleave",delegate:xt,handler:function(t){var e=t.type;t.current===this.input&&Ae(this.state,"uk-"+(L(e,"focus")?"focus":"hover"),L(["focusin","mouseenter"],e))}},{name:"change",handler:function(){var t,e=this.target,n=this.input;e&&(e[bt(e)?"value":"textContent"]=n.files&&n.files[0]?n.files[0].name:Gt(n,"select")&&(t=Ot("option",n).filter(function(t){return t.selected})[0])?t.textContent:n.value)}}]})},ii=function(t){t.component("gif",{update:{read:function(){var t=pt(this.$el);!this.isInView&&t&&(this.$el.src=this.$el.src),this.isInView=t},events:["scroll","load","resize"]}})},oi=function(t){t.component("grid",t.components.margin.extend({mixins:[Zn],name:"grid",defaults:{margin:"uk-grid-margin",clsStack:"uk-grid-stack"},update:{write:function(){Ae(this.$el,this.clsStack,this.stacks)},events:["load","resize"]}}))},ri=function(t){t.component("height-match",{args:"target",props:{target:String,row:Boolean},defaults:{target:"> *",row:!0},computed:{elements:function(t,e){return Ot(t.target,e)}},update:{read:function(){var t=this,e=!1;fe(this.elements,"minHeight",""),this.rows=this.row?this.elements.reduce(function(t,n){return e!==n.offsetTop?t.push([n]):t[t.length-1].push(n),e=n.offsetTop,t},[]).map(function(e){return t.match(e)}):[this.match(this.elements)]},write:function(){this.rows.forEach(function(t){var e=t.height;return fe(t.elements,"minHeight",e)})},events:["load","resize"]},methods:{match:function(t){if(t.length<2)return{};var e=0,n=[];return t.forEach(function(t){var i,o;yt(t)||(i=ae(t,"style"),o=ae(t,"hidden"),ae(t,{style:(i||"")+";display:block !important;",hidden:null})),e=Math.max(e,t.offsetHeight),n.push(t.offsetHeight),I(i)||ae(t,{style:i,hidden:o})}),t=t.filter(function(t,i){return n[i]<e}),{height:e,elements:t}}}})},si=function(t){t.component("height-viewport",{props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},defaults:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{write:function(){fe(this.$el,"boxSizing","border-box");var t,n=xn(K),i=0;if(this.expand){fe(this.$el,{height:"",minHeight:""});var o=n-e(et);o>0&&(t=e(this.$el)+o)}else{var r=mn(this.$el).top;r<n/2&&this.offsetTop&&(i+=r),!0===this.offsetBottom?i+=e(this.$el.nextElementSibling):H(this.offsetBottom)?i+=n/100*this.offsetBottom:this.offsetBottom&&x(this.offsetBottom,"px")?i+=P(this.offsetBottom):D(this.offsetBottom)&&(i+=e(qt(this.offsetBottom,this.$el))),t=i?"calc(100vh - "+i+"px)":"100vh"}if(t){fe(this.$el,{height:"",minHeight:t});var s=this.$el.offsetHeight;this.minHeight&&this.minHeight>s&&fe(this.$el,"minHeight",this.minHeight),n-i>=s&&fe(this.$el,"height",t)}},events:["load","resize"]}});function e(t){return t&&t.offsetHeight||0}},ai=function(t){ot(function(){if(je){Ue(tt,"tap",function(t){var e=t.target;return Ot(".uk-hover").forEach(function(t,n){return!Wt(e,n)&&$e(n,"uk-hover")})}),Object.defineProperty(t,"hoverSelector",{set:function(t){Ue(tt,"tap",t,function(t){return Te(t.current,"uk-hover")})}}),t.hoverSelector=".uk-animation-toggle, .uk-transition-toggle, [uk-hover]"}})},li=function(t){var e={},n={spinner:'<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"></circle></svg>',totop:'<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "></polyline></svg>',marker:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"></rect><rect x="4" y="9" width="11" height="1"></rect></svg>',"close-icon":'<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"></line><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"></line></svg>',"close-large":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"></line><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"></line></svg>',"navbar-toggle-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"></rect><rect y="3" width="20" height="2"></rect><rect y="15" width="20" height="2"></rect></svg>',"overlay-icon":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"></rect><rect x="0" y="19" width="40" height="1"></rect></svg>',"pagination-next":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"></polyline></svg>',"pagination-previous":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"></polyline></svg>',"search-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"></circle><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"></path></svg>',"search-large":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"></circle><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"></line></svg>',"search-navbar":'<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',"slidenav-next":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "></polyline></svg>',"slidenav-next-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "></polyline></svg>',"slidenav-previous":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "></polyline></svg>',"slidenav-previous-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "></polyline></svg>'};t.component("icon",t.components.svg.extend({attrs:["icon","ratio"],mixins:[Zn],name:"icon",args:"icon",props:["icon"],defaults:{exclude:["id","style","class","src","icon"]},init:function(){Te(this.$el,"uk-icon"),nt&&(this.icon=Z(Z(this.icon,"left","right"),"previous","next"))},disconnected:function(){delete this.delay},methods:{getSvg:function(){var t=function(t){if(!n[t])return null;e[t]||(e[t]=jt(n[t].trim()));return e[t]}(this.icon);return t?a.resolve(t):a.reject("Icon not found.")}}})),["marker","navbar-toggle-icon","overlay-icon","pagination-previous","pagination-next","totop"].forEach(function(t){return i(t)}),["slidenav-previous","slidenav-next"].forEach(function(t){return i(t,{init:function(){Te(this.$el,"uk-slidenav"),Se(this.$el,"uk-slidenav-large")&&(this.icon+="-large")}})}),i("search-icon",{init:function(){Se(this.$el,"uk-search-icon")&&Kt(this.$el,".uk-search-large").length?this.icon="search-large":Kt(this.$el,".uk-search-navbar").length&&(this.icon="search-navbar")}}),i("close",{init:function(){this.icon="close-"+(Se(this.$el,"uk-close-large")?"large":"icon")}}),i("spinner",{connected:function(){var t=this;this.svg.then(function(e){return 1!==t.ratio&&fe(jt("circle",e),"stroke-width",1/t.ratio)},X)}}),t.icon.add=function(i){Object.keys(i).forEach(function(t){n[t]=i[t],delete e[t]}),t._initialized&&U(t.instances,function(t){"icon"===t.$options.name&&t.$reset()})};function i(e,n){t.component(e,t.components.icon.extend({name:e,mixins:n?[n]:[],defaults:{icon:e}}))}},ci=function(t){t.component("leader",{mixins:[Zn],props:{fill:String,media:"media"},defaults:{fill:"",media:!1,clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){var e=t.fill;return e||me("leader-fill")}},connected:function(){this.wrapper=At(this.$el,'<span class="'+this.clsWrapper+'">')[0]},disconnected:function(){Bt(this.wrapper.childNodes),delete this._width},update:[{read:function(){var t=this._width;this._width=Math.floor(this.$el.offsetWidth/2),this._changed=this._changed||t!==this._width,this._hide=this.media&&!K.matchMedia(this.media).matches},write:function(){Ae(this.wrapper,this.clsHide,this._hide),this._changed&&(this._changed=!1,ae(this.wrapper,this.attrFill,new Array(this._width).join(this.fill)))},events:["load","resize"]}]})},hi=function(t){t.component("margin",{props:{margin:String,firstColumn:Boolean},defaults:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(){var t=this.$el.children;if(t.length&&yt(this.$el)){this.stacks=!0;for(var e=[[]],n=0;n<t.length;n++){var i=t[n],o=i.getBoundingClientRect();if(o.height)for(var r=e.length-1;r>=0;r--){var s=e[r];if(!s[0]){s.push(i);break}var a=s[0].getBoundingClientRect();if(o.top>=Math.floor(a.bottom)){e.push([i]);break}if(Math.floor(o.bottom)>a.top){if(this.stacks=!1,o.left<a.left&&!nt){s.unshift(i);break}s.push(i);break}if(0===r){e.unshift([i]);break}}}this.rows=e}else this.rows=!1},write:function(){var t=this;this.rows&&this.rows.forEach(function(e,n){return e.forEach(function(e,i){Ae(e,t.margin,0!==n),Ae(e,t.firstColumn,0===i)})})},events:["load","resize"]}})},ui=function(t){t.component("modal",{mixins:[Yn],defaults:{clsPage:"uk-modal-page",clsPanel:"uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){Se(this.panel,"uk-margin-auto-vertical")?Te(this.$el,"uk-flex"):fe(this.$el,"display","block"),xn(this.$el)}},{name:"hidden",self:!0,handler:function(){fe(this.$el,"display",""),$e(this.$el,"uk-flex")}}]}),t.component("overflow-auto",{mixins:[Zn],computed:{modal:function(t,e){return Qt(e,".uk-modal")},panel:function(t,e){return Qt(e,".uk-modal-dialog")}},connected:function(){fe(this.$el,"minHeight",150)},update:{write:function(){if(this.panel&&this.modal){var t=fe(this.$el,"maxHeight");fe(fe(this.$el,"maxHeight",150),"maxHeight",Math.max(150,150+xn(this.modal)-this.panel.offsetHeight)),t!==fe(this.$el,"maxHeight")&&Ge(this.$el,"resize")}},events:["load","resize"]}}),t.modal.dialog=function(e,n){var i=t.modal(' <div class="uk-modal"> <div class="uk-modal-dialog">'+e+"</div> </div> ",n);return Ue(i.$el,"hidden",function(t){t.target===t.current&&i.$destroy(!0)}),i.show(),i},t.modal.alert=function(e,n){return n=V({bgClose:!1,escClose:!1,labels:t.modal.labels},n),new a(function(i){return Ue(t.modal.dialog(' <div class="uk-modal-body">'+(D(e)?e:kt(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+n.labels.ok+"</button> </div> ",n).$el,"hide",i)})},t.modal.confirm=function(e,n){return n=V({bgClose:!1,escClose:!1,labels:t.modal.labels},n),new a(function(i,o){return Ue(t.modal.dialog(' <div class="uk-modal-body">'+(D(e)?e:kt(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close">'+n.labels.cancel+'</button> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+n.labels.ok+"</button> </div> ",n).$el,"click",".uk-modal-footer button",function(t){return 0===Ht(t.target)?o():i()})})},t.modal.prompt=function(e,n,i){return i=V({bgClose:!1,escClose:!1,labels:t.modal.labels},i),new a(function(o){var r=!1,s=t.modal.dialog(' <form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(D(e)?e:kt(e))+'</label> <input class="uk-input" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+i.labels.cancel+'</button> <button class="uk-button uk-button-primary">'+i.labels.ok+"</button> </div> </form> ",i),a=jt("input",s.$el);a.value=n,Ue(s.$el,"submit","form",function(t){t.preventDefault(),o(a.value),r=!0,s.hide()}),Ue(s.$el,"hide",function(){r||o(null)})})},t.modal.labels={ok:"Ok",cancel:"Cancel"}},di=function(t){t.component("nav",t.components.accordion.extend({name:"nav",defaults:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}}))},fi=function(t){t.component("navbar",{mixins:[Zn],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:"query",duration:Number},defaults:{dropdown:".uk-navbar-nav > li",align:nt?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200},computed:{boundary:function(t,e){var n=t.boundary,i=t.boundaryAlign;return!0===n||i?e:n},pos:function(t){return"bottom-"+t.align}},ready:function(){this.dropbar&&t.navbarDropbar(qt(this.dropbar,this.$el)||$t(this.dropbarAnchor||this.$el,"<div></div>"),{clsDrop:this.clsDrop,mode:this.dropbarMode,duration:this.duration,navbar:this})},update:function(){t.drop(Ot(this.dropdown+" ."+this.clsDrop,this.$el).filter(function(e){return!t.getComponent(e,"dropdown")}),V({},this.$props,{boundary:this.boundary,pos:this.pos}))},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,n=this.getActive();n&&n.toggle&&!Wt(n.toggle.$el,e)&&!n.tracker.movesTo(n.$el)&&n.hide(!1)}}],methods:{getActive:function(){var e=t.drop.getActive();return e&&L(e.mode,"hover")&&Wt(e.toggle.$el,this.$el)&&e}}}),t.component("navbar-dropbar",{mixins:[Zn],defaults:{clsDrop:"",mode:"slide",navbar:null,duration:200},init:function(){"slide"===this.mode&&Te(this.$el,"uk-navbar-dropbar-slide")},events:[{name:"beforeshow",el:function(){return this.navbar.$el},handler:function(t,e){var n=e.$el;"bottom"!==e.dir||Wt(n,this.$el)||(Lt(this.$el,n),e.show(),t.preventDefault())}},{name:"mouseleave",handler:function(){var t=this.navbar.getActive();t&&!Gt(this.$el,":hover")&&t.hide()}},{name:"show",handler:function(t,e){var n=e.$el;this.clsDrop&&Te(n,this.clsDrop+"-dropbar"),this.transitionTo(n.offsetHeight+P(fe(n,"margin-top"))+P(fe(n,"margin-bottom")))}},{name:"beforehide",handler:function(t,e){var n=e.$el,i=this.navbar.getActive();Gt(this.$el,":hover")&&i&&i.$el===n&&t.preventDefault()}},{name:"hide",handler:function(t,e){var n=e.$el,i=this.navbar.getActive();(!i||i&&i.$el===n)&&this.transitionTo(0)}}],methods:{transitionTo:function(t){return xn(this.$el,yt(this.$el)?xn(this.$el):0),at.cancel(this.$el),at.start(this.$el,{height:t},this.duration).catch(X)}}})},pi=function(t){t.component("offcanvas",{mixins:[Yn],args:"mode",props:{content:String,mode:String,flip:Boolean,overlay:Boolean},defaults:{content:".uk-offcanvas-content",mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",clsPanel:"uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContent:"uk-offcanvas-content",clsContentAnimation:"uk-offcanvas-content-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close"},computed:{content:function(t){var e=t.content;return jt(e)},clsFlip:function(t){var e=t.flip,n=t.clsFlip;return e?n:""},clsOverlay:function(t){var e=t.overlay,n=t.clsOverlay;return e?n:""},clsMode:function(t){var e=t.mode,n=t.clsMode;return n+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,n=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":n},clsContentAnimation:function(t){var e=t.mode,n=t.clsContentAnimation;return"push"!==e&&"reveal"!==e?"":n},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},update:{write:function(){this.getActive()===this&&((this.overlay||this.clsContentAnimation)&&bn(this.content,bn(K)-this.scrollbarWidth),this.overlay&&(xn(this.content,xn(K)),Xn&&(this.content.scrollTop=Xn.y)))},events:["resize"]},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current;e.hash&&jt(e.hash,this.content)&&(Xn=null,this.hide())}},{name:"beforescroll",filter:function(){return this.overlay},handler:function(t,e,n){e&&n&&this.isToggled()&&jt(n,this.content)&&(Xe(this.$el,"hidden",function(){return e.scrollTo(n)}),t.preventDefault())}},{name:"show",self:!0,handler:function(){Xn=Xn||{x:K.pageXOffset,y:K.pageYOffset},"reveal"!==this.mode||Se(this.panel,this.clsMode)||(St(this.panel,"<div>"),Te(this.panel.parentNode,this.clsMode)),fe(et,"overflowY",(!this.clsContentAnimation||this.flip)&&this.scrollbarWidth&&this.overlay?"scroll":""),Te(tt.body,this.clsContainer+" "+this.clsFlip+" "+this.clsOverlay),xn(tt.body),Te(this.content,this.clsContentAnimation),Te(this.panel,this.clsSidebarAnimation+" "+("reveal"!==this.mode?this.clsMode:"")),Te(this.$el,this.clsOverlay),fe(this.$el,"display","block"),xn(this.$el)}},{name:"hide",self:!0,handler:function(){$e(this.content,this.clsContentAnimation);var t=this.getActive();("none"===this.mode||t&&t!==this&&t!==this.prev)&&Ge(this.panel,Re)}},{name:"hidden",self:!0,handler:function(){if("reveal"===this.mode&&Bt(this.panel),this.overlay){if(!Xn){var t=this.content,e=t.scrollLeft,n=t.scrollTop;Xn={x:e,y:n}}}else Xn={x:K.pageXOffset,y:K.pageYOffset};$e(this.panel,this.clsSidebarAnimation+" "+this.clsMode),$e(this.$el,this.clsOverlay),fe(this.$el,"display",""),$e(tt.body,this.clsContainer+" "+this.clsFlip+" "+this.clsOverlay),tt.body.scrollTop=Xn.y,fe(et,"overflow-y",""),bn(this.content,""),xn(this.content,""),K.scrollTo(Xn.x,Xn.y),Xn=null}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&On(t)&&("swipeLeft"===t.type&&!this.flip||"swipeRight"===t.type&&this.flip)&&this.hide()}}]})},gi=function(t){t.component("responsive",{props:["width","height"],init:function(){Te(this.$el,"uk-responsive-width")},update:{read:function(){this.dim=!!(yt(this.$el)&&this.width&&this.height)&&{width:bn(this.$el.parentNode),height:this.height}},write:function(){this.dim&&xn(this.$el,wt.contain({height:this.height,width:this.width},this.dim).height)},events:["load","resize"]}})},vi=function(t){t.component("scroll",{props:{duration:Number,offset:Number},defaults:{duration:1e3,offset:0},methods:{scrollTo:function(t){var e=this,n=mn(t=t&&jt(t)||tt.body).top-this.offset,i=xn(tt),o=xn(K);if(n+o>i&&(n=i-o),Ge(this.$el,"beforescroll",[this,t])){var r=Date.now(),s=K.pageYOffset,a=function(){var i,o=s+(n-s)*(i=Y((Date.now()-r)/e.duration),.5*(1-Math.cos(Math.PI*i)));K.scrollTo(K.pageXOffset,o),o!==n?_e(a):Ge(e.$el,"scrolled",[e,t])};a()}}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(se(this.$el.hash).substr(1)))}}})},mi=function(t){t.component("scrollspy",{args:"cls",props:{cls:"list",target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},defaults:{cls:["uk-scrollspy-inview"],target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"},computed:{elements:function(t,e){var n=t.target;return n?Ot(n,e):[e]}},update:[{write:function(){this.hidden&&fe(Rt(this.elements,":not(."+this.inViewClass+")"),"visibility","hidden")}},{read:function(){var e=this;if(!t._initialized)return!1;this.elements.forEach(function(t){if(!t._scrollspy){var n=ae(t,"uk-scrollspy-class");t._scrollspy={toggles:n&&n.split(",")||e.cls}}t._scrollspy.show=pt(t,e.offsetTop,e.offsetLeft)})},write:function(){var t=this,e=1===this.elements.length?1:0;this.elements.forEach(function(n,i){var o=n._scrollspy,r=o.toggles[i]||o.toggles[0];if(o.show){if(!o.inview&&!o.timer){var s=function(){fe(n,"visibility",""),Te(n,t.inViewClass),Ae(n,r),Ge(n,"inview"),t.$update(),o.inview=!0,delete o.timer};t.delay&&e?o.timer=setTimeout(s,t.delay*e):s(),e++}}else o.inview&&t.repeat&&(o.timer&&(clearTimeout(o.timer),delete o.timer),fe(n,"visibility",t.hidden?"hidden":""),$e(n,t.inViewClass),Ae(n,r),Ge(n,"outview"),t.$update(),o.inview=!1)})},events:["scroll","load","resize"]}]})},wi=function(t){t.component("scrollspy-nav",{props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},defaults:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:function(t,e){return Ot('a[href^="#"]',e).filter(function(t){return t.hash})},elements:function(){return this.closest?Qt(this.links,this.closest):this.links},targets:function(){return Ot(this.links.map(function(t){return t.hash}).join(","))}},update:[{read:function(){this.scroll&&t.scroll(this.links,{offset:this.offset||0})}},{read:function(){var t=this,e=K.pageYOffset+this.offset+1,n=xn(tt)-xn(K)+this.offset;this.active=!1,this.targets.every(function(i,o){var r=mn(i).top,s=o+1===t.targets.length;if(!t.overflow&&(0===o&&r>e||s&&r+i.offsetTop<e))return!1;if(!s&&mn(t.targets[o+1]).top<=e)return!0;if(e>=n)for(var a=t.targets.length-1;a>o;a--)if(pt(t.targets[a])){i=t.targets[a];break}return!(t.active=jt(Rt(t.links,'[href="#'+i.id+'"]')))})},write:function(){this.links.forEach(function(t){return t.blur()}),$e(this.elements,this.cls),this.active&&Ge(this.$el,"active",[this.active,Te(this.closest?Qt(this.active,this.closest):this.active,this.cls)])},events:["scroll","load","resize"]}]})},yi=function(t){t.component("sticky",{mixins:[Zn],attrs:!0,props:{top:null,bottom:Boolean,offset:Number,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:"query",showOnUp:Boolean,media:"media",target:Number},defaults:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,media:!1,target:!1},computed:{selTarget:function(t,e){var n=t.selTarget;return n&&jt(n,e)||e}},connected:function(){this.placeholder=jt('<div class="uk-sticky-placeholder"></div>'),this.widthElement=this.$props.widthElement||this.placeholder,this.isActive||this.hide()},disconnected:function(){this.isActive&&(this.isActive=!1,this.hide(),$e(this.$el,this.clsInactive)),Mt(this.placeholder),this.placeholder=null,this.widthElement=null},ready:function(){var t=this;if(this.target&&location.hash&&K.pageYOffset>0){var e=jt(location.hash);e&&_e(function(){var n=mn(e).top,i=mn(t.$el).top,o=t.$el.offsetHeight;i+o>=n&&i<=n+e.offsetHeight&&K.scrollTo(0,n-o-t.target-t.offset)})}},events:[{name:"active",self:!0,handler:function(){Me(this.selTarget,this.clsInactive,this.clsActive)}},{name:"inactive",self:!0,handler:function(){Me(this.selTarget,this.clsActive,this.clsInactive)}}],update:[{write:function(){var t,e=this,n=this.placeholder,i=(this.isActive?n:this.$el).offsetHeight;fe(n,V({height:"absolute"!==fe(this.$el,"position")?i:""},fe(this.$el,["marginTop","marginBottom","marginLeft","marginRight"]))),Wt(n,et)||($t(this.$el,n),ae(n,"hidden","")),ae(this.widthElement,"hidden",null),this.width=this.widthElement.offsetWidth,ae(this.widthElement,"hidden",this.isActive?null:""),this.topOffset=mn(this.isActive?n:this.$el).top,this.bottomOffset=this.topOffset+i,["top","bottom"].forEach(function(n){e[n]=e.$props[n],e[n]&&(H(e[n])?e[n]=e[n+"Offset"]+P(e[n]):D(e[n])&&e[n].match(/^-?\d+vh$/)?e[n]=xn(K)*P(e[n])/100:(t=!0===e[n]?e.$el.parentNode:qt(e[n],e.$el))&&(e[n]=mn(t).top+t.offsetHeight))}),this.top=Math.max(P(this.top),this.topOffset)-this.offset,this.bottom=this.bottom&&this.bottom-i,this.inactive=this.media&&!K.matchMedia(this.media).matches,this.isActive&&this.update()},events:["load","resize"]},{read:function(t){var e=t.scrollY;void 0===e&&(e=K.pageYOffset),this.offsetTop=mn(this.$el).top,this.scroll=e,this.visible=yt(this.$el)},write:function(t){var e=this;void 0===t&&(t={});var n=t.dir,i=this.scroll;if(!(i<0||!this.visible||this.disabled||this.showOnUp&&!n))if(this.inactive||i<this.top||this.showOnUp&&(i<=this.top||"down"===n||"up"===n&&!this.isActive&&i<=this.bottomOffset)){if(!this.isActive)return;this.isActive=!1,this.animation&&i>this.topOffset?(ft.cancel(this.$el),ft.out(this.$el,this.animation).then(function(){return e.hide()},X)):this.hide()}else this.isActive?this.update():this.animation?(ft.cancel(this.$el),this.show(),ft.in(this.$el,this.animation).catch(X)):this.show()},events:["scroll"]}],methods:{show:function(){this.isActive=!0,this.update(),ae(this.placeholder,"hidden",null)},hide:function(){this.isActive&&!Se(this.selTarget,this.clsActive)||Ge(this.$el,"inactive"),$e(this.$el,this.clsFixed,this.clsBelow),fe(this.$el,{position:"",top:"",width:""}),ae(this.placeholder,"hidden","")},update:function(){var t=Math.max(0,this.offset),e=this.scroll>this.top;this.bottom&&this.scroll>this.bottom-this.offset&&(t=this.bottom-this.scroll),fe(this.$el,{position:"fixed",top:t+"px",width:this.width}),Se(this.selTarget,this.clsActive)?e||Ge(this.$el,"inactive"):e&&Ge(this.$el,"active"),Ae(this.$el,this.clsBelow,this.scroll>this.bottomOffset),Te(this.$el,this.clsFixed)}}})},xi={},bi=function(t){t.component("svg",{attrs:!0,props:{id:String,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String},defaults:{ratio:1,id:!1,exclude:["src"],class:""},init:function(){this.class+=" uk-svg"},connected:function(){var t=this;if(!this.icon&&L(this.src,"#")){var i=this.src.split("#");i.length>1&&(this.src=i[0],this.icon=i[1])}this.svg=this.getSvg().then(function(i){var o;if(D(i)?(t.icon&&L(i,"<symbol")&&(i=function(t,i){if(!n[t]){n[t]={};for(var o;o=e.exec(t);)n[t][o[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+o[1]+"svg>"}return n[t][i]}(i,t.icon)||i),o=jt(i.substr(i.indexOf("<svg")))):o=i.cloneNode(!0),!o)return a.reject("SVG not found.");var r=ae(o,"viewBox");r&&(r=r.split(" "),t.width=t.$props.width||r[2],t.height=t.$props.height||r[3]),t.width*=t.ratio,t.height*=t.ratio;for(var s in t.$options.props)t[s]&&!L(t.exclude,s)&&ae(o,s,t[s]);t.id||ce(o,"id"),t.width&&!t.height&&ce(o,"height"),t.height&&!t.width&&ce(o,"width");var l=t.$el;if(mt(l)||"CANVAS"===l.tagName){ae(l,{hidden:!0,id:null});var c=l.nextElementSibling;c&&o.isEqualNode(c)?o=c:$t(l,o)}else{var h=l.lastElementChild;h&&o.isEqualNode(h)?o=h:Lt(l,o)}return t.svgEl=o,o},X)},disconnected:function(){var t=this;mt(this.$el)&&ae(this.$el,{hidden:null,id:this.id||null}),this.svg&&this.svg.then(function(e){return(!t._connected||e!==t.svgEl)&&Mt(e)},X),this.svg=this.svgEl=null},methods:{getSvg:function(){var t=this;return this.src?xi[this.src]?xi[this.src]:(xi[this.src]=new a(function(e,n){w(t.src,"data:")?e(decodeURIComponent(t.src.split(",")[1])):Q(t.src).then(function(t){return e(t.response)},function(){return n("SVG not found.")})}),xi[this.src]):a.reject()}}});var e=/<symbol(.*?id=(['"])(.*?)\2[^]*?<\/)symbol>/g,n={}},Ci=function(t){t.component("switcher",{mixins:[Un],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},defaults:{connect:"~.uk-switcher",toggle:"> *",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item",queued:!0},computed:{connects:function(t,e){return zt(t.connect,e)},toggles:function(t,e){return Ot(t.toggle,e)}},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(ue(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){On(t)&&(t.preventDefault(),K.getSelection().toString()||this.show("swipeLeft"===t.type?"next":"previous"))}}],update:function(){var t=this;this.connects.forEach(function(e){return t.updateAria(e.children)}),this.show(Rt(this.toggles,"."+this.cls)[0]||this.toggles[this.active]||this.toggles[0])},methods:{show:function(t){for(var e,n=this,i=this.toggles.length,o=!!this.connects.length&&Ht(Rt(this.connects[0].children,"."+this.cls)[0]),r=o>=0,s=gt(t,this.toggles,o),a="previous"===t?-1:1,l=0;l<i;l++,s=(s+a+i)%i)if(!Gt(n.toggles[s],".uk-disabled, [disabled]")){e=n.toggles[s];break}!e||o>=0&&Se(e,this.cls)||o===s||($e(this.toggles,this.cls),ae(this.toggles,"aria-expanded",!1),Te(e,this.cls),ae(e,"aria-expanded",!0),this.connects.forEach(function(t){r?n.toggleElement([t.children[o],t.children[s]]):n.toggleNow(t.children[s])}))}}})},ki=function(t){t.component("tab",t.components.switcher.extend({mixins:[Zn],name:"tab",props:{media:"media"},defaults:{media:960,attrItem:"uk-tab-item"},init:function(){var e=Se(this.$el,"uk-tab-left")?"uk-tab-left":!!Se(this.$el,"uk-tab-right")&&"uk-tab-right";e&&t.toggle(this.$el,{cls:e,mode:"media",media:this.media})}}))},Li=function(t){t.component("toggle",{mixins:[t.mixin.togglable],args:"target",props:{href:String,target:null,mode:"list",media:"media"},defaults:{href:!1,target:!1,mode:"click",queued:!0,media:!1},computed:{target:function(t,e){var n=t.href,i=t.target;return i=zt(i||n,e),i.length&&i||[e]}},events:[{name:ze+" "+Fe,filter:function(){return L(this.mode,"hover")},handler:function(t){On(t)||this.toggle("toggle"+(t.type===ze?"show":"hide"))}},{name:"click",filter:function(){return L(this.mode,"click")||je},handler:function(t){if(On(t)||L(this.mode,"click")){var e;(Qt(t.target,'a[href="#"], button')||(e=Qt(t.target,"a[href]"))&&(this.cls||!yt(this.target)||e.hash&&Gt(this.target,e.hash)))&&t.preventDefault(),this.toggle()}}}],update:{write:function(){if(L(this.mode,"media")&&this.media){var t=this.isToggled(this.target);(K.matchMedia(this.media).matches?!t:t)&&this.toggle()}},events:["load","resize"]},methods:{toggle:function(t){Ge(this.target,t||"toggle",[this])&&this.toggleElement(this.target)}}})},Ti=function(t){t.component("video",{props:{automute:Boolean,autoplay:Boolean},defaults:{automute:!1,autoplay:!0},ready:function(){this.player=new fn(this.$el),this.automute&&this.player.mute()},update:{write:function(){this.player&&(yt(this.$el)&&"hidden"!==fe(this.$el,"visibility")?this.autoplay&&this.player.play():this.player.pause())},events:["load"]}})};zn.version="3.0.0-beta.35",($i=zn).mixin.class=Zn,$i.mixin.container=Vn,$i.mixin.modal=Yn,$i.mixin.position=Gn,$i.mixin.togglable=Un;var $i;!function(t){var e=0,n=0;Ue(K,"load resize",t.update),Ue(K,"scroll",function(n){n.dir=e<=K.pageYOffset?"down":"up",n.scrollY=e=K.pageYOffset,t.update(n)}),We&&Ue(tt,We,function(t){var e=t.target;(fe(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(n++,tt.body.style.overflowX="hidden",setTimeout(function(){--n||(tt.body.style.overflowX="")},W(fe(e,"animationDuration"))+100))},!0),t.use(Li),t.use(Jn),t.use(Qn),t.use(Ti),t.use(Kn),t.use(ti),t.use(ei),t.use(ni),t.use(ri),t.use(si),t.use(ai),t.use(hi),t.use(ii),t.use(oi),t.use(ci),t.use(ui),t.use(di),t.use(fi),t.use(pi),t.use(gi),t.use(vi),t.use(mi),t.use(wi),t.use(yi),t.use(bi),t.use(li),t.use(Ci),t.use(ki)}(zn);function Ei(t){if(!Ei.installed){var e=t.util,n=e.$,i=e.doc,o=e.empty,r=e.html;t.component("countdown",{mixins:[t.mixin.class],attrs:!0,props:{date:String,clsWrapper:String},defaults:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","days"),e)},hours:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","hours"),e)},minutes:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","minutes"),e)},seconds:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","seconds"),e)},units:function(){var t=this;return["days","hours","minutes","seconds"].filter(function(e){return t[e]})}},connected:function(){this.start()},disconnected:function(){var t=this;this.stop(),this.units.forEach(function(e){return o(t[e])})},events:[{name:"visibilitychange",el:i,handler:function(){i.hidden?this.stop():this.start()}}],update:{write:function(){var t=this,e=function(t){var e=t-Date.now();return{total:e,seconds:e/1e3%60,minutes:e/1e3/60%60,hours:e/1e3/60/60%24,days:e/1e3/60/60/24}}(this.date);e.total<=0&&(this.stop(),e.days=e.hours=e.minutes=e.seconds=0),this.units.forEach(function(n){var i=String(Math.floor(e[n]));i=i.length<2?"0"+i:i;var o=t[n];o.textContent!==i&&((i=i.split("")).length!==o.children.length&&r(o,i.map(function(){return"<span></span>"}).join("")),i.forEach(function(t,e){return o.children[e].textContent=t}))})}},methods:{start:function(){var t=this;this.stop(),this.date&&this.units.length&&(this.$emit(),this.timer=setInterval(function(){return t.$emit()},1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}})}}function Mi(t){if(!Mi.installed){var e=t.util,n=e.$$,i=e.addClass,o=e.css,r=e.scrolledOver,s=e.toFloat,a=e.toNodes;t.component("grid-parallax",t.components.grid.extend({props:{target:String,translate:Number},defaults:{target:!1,translate:150},computed:{translate:function(t){var e=t.translate;return Math.abs(e)},items:function(t,e){var i=t.target;return i?n(i,e):a(e.children)}},init:function(){i(this.$el,"uk-grid")},disconnected:function(){this.reset(),o(this.$el,"marginBottom","")},update:[{read:function(){this.columns=this.rows&&this.rows[0]&&this.rows[0].length||0,this.rows=this.rows&&this.rows.map(function(t){return e="offsetLeft",t.sort(function(t,n){return t[e]>n[e]?1:n[e]>t[e]?-1:0});var e})},write:function(){o(this.$el,"marginBottom",this.columns>1?this.translate+s(o(o(this.$el,"marginBottom",""),"marginBottom")):"")},events:["load","resize"]},{read:function(){this.scrolled=r(this.$el)*this.translate},write:function(){var t=this;if(!this.rows||1===this.columns||!this.scrolled)return this.reset();this.rows.forEach(function(e){return e.forEach(function(e,n){return o(e,"transform","translateY("+(n%2?t.scrolled:t.scrolled/8)+"px)")})})},events:["scroll","load","resize"]}],methods:{reset:function(){o(this.items,"transform","")}}})),t.component("grid-parallax").options.update.unshift({read:function(){this.reset()},events:["load","resize"]})}}var Si=function(t){var e=t.util.css,n={slide:{show:function(t){return[{transform:Ai(-100*t)},{transform:Ai()}]},percent:function(t){return n.translated(t)},translate:function(t,e){return[{transform:Ai(-100*e*t)},{transform:Ai(100*e*(1-t))}]}},translated:function(t){return Math.abs(e(t,"transform").split(",")[4]/t.offsetWidth)}};return n};function Ai(t){return void 0===t&&(t=0),"translate("+t+(t?"%":"")+", 0)"}function Bi(t){return"scale3d("+t+", "+t+", 1)"}function Ni(t){if(!Ni.installed){var e=t.util,n=e.$$,i=e.$,o=e.addClass,r=e.assign,s=e.createEvent,a=e.css,l=e.data,c=e.doc,h=e.endsWith,u=e.fastdom,d=e.getIndex,f=e.getPos,p=e.hasClass,g=e.index,v=e.isTouch,m=e.noop,w=e.off,y=e.on,x=e.pointerDown,b=e.pointerMove,C=e.pointerUp,k=e.preventClick,L=e.Promise,T=e.removeClass,$=e.toggleClass,E=e.toNodes,M=e.Transition,S=e.trigger,A=e.win,B=Math.abs;t.mixin.slideshow={attrs:!0,props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean,animation:String,easing:String,velocity:Number},defaults:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0,animation:"slide",easing:"ease",velocity:1,index:0,stack:[],threshold:10,percent:0,clsActive:"uk-active",clsActivated:"uk-transition-active",initialAnimation:!1,Animations:Si(t)},computed:{list:function(t,e){var n=t.selList;return i(n,e)},slides:function(){return E(this.list.children)},animation:function(t){var e=t.animation,n=t.Animations;return r(e in n?n[e]:n.slide,{name:e})},duration:function(t,e){var n=t.velocity;return.5*(e.offsetWidth/n)+300}},init:function(){var t=this;["start","move","end"].forEach(function(e){var n=t[e];t[e]=function(e){var i=f(e).x;t.prevPos=i!==t.pos?t.pos:t.prevPos,t.pos=i,n(e)}})},connected:function(){this.startAutoplay()},disconnected:function(){this.stopAutoplay()},update:[{read:function(){delete this._computeds.duration},events:["load","resize"]}],events:[{name:"click",delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),t.current.blur(),this.show(l(t.current,this.attrItem))}},{name:x,delegate:function(){return this.selList+" > *"},handler:function(t){(v(t)||(e=t.target,e.children.length||!e.childNodes.length))&&this.start(t);var e}},{name:"visibilitychange",el:c,handler:function(){c.hidden?this.stopAutoplay():this.startAutoplay()}},{name:x,handler:"stopAutoplay"},{name:"mouseenter",filter:function(){return this.autoplay},handler:function(){this.isHovering=!0}},{name:"mouseleave",filter:function(){return this.autoplay},handler:function(){this.isHovering=!1}},{name:"beforeitemshow",self:!0,delegate:function(){return this.selList+" > *"},handler:function(t){var e=t.target;o(e,this.clsActive)}},{name:"itemshown",self:!0,delegate:function(){return this.selList+" > *"},handler:function(t){var e=t.target;o(e,this.clsActivated)}},{name:"itemshow itemhide",self:!0,delegate:function(){return this.selList+" > *"},handler:function(t){var e=t.type,i=t.target;$(n("["+this.attrItem+'="'+g(i)+'"],[data-'+this.attrItem+'="'+g(i)+'"]',this.$el),this.clsActive,h(e,"show"))}},{name:"itemhidden",self:!0,delegate:function(){return this.selList+" > *"},handler:function(t){var e=t.target;T(e,this.clsActive),T(e,this.clsActivated)}},{name:"itemshow itemhide itemshown itemhidden",self:!0,delegate:function(){return this.selList+" > *"},handler:function(e){var n=e.target;t.update(null,n)}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(t){if(!(t.button>0||this.slides.length<2||this._animation&&this._animation.animation!==this.animation)){var e=0;if(this.stack.length){var n=this._animation,i=n.dir,o=n.percent,r=n.cancel,s=n.translate;e=o()*i,this.percent=B(e)*-i,this.stack.splice(0,this.stack.length),r(),s(B(e)),this.index=this.getIndex(this.index-i),this.dragging=!0}this.unbindMove=y(c,b,this.move,{capture:!0,passive:!1}),y(A,"scroll",this.unbindMove),y(c,C,this.end,!0),this.drag=this.pos+this.$el.offsetWidth*e}},move:function(e){var n=this,i=this.pos-this.drag;if(!(this.prevPos===this.pos||!this.dragging&&B(i)<this.threshold)){e.cancelable&&e.preventDefault(),this.dragging=!0;var o=i/this.$el.offsetWidth;if(this.percent!==o){var r=this.getIndex(this.index-_(this.percent)),s=this.getIndex(this.index-_(o)),a=this.slides[s],l=o<0?1:-1,c=d(o<0?"next":"previous",this.slides,s),h=this.slides[c];this.slides.forEach(function(t,e){return $(t,n.clsActive,e===s||e===c)}),this._animation&&this._animation.reset(),s!==r&&(S(this.slides[r],"itemhide",[this]),S(a,"itemshow",[this])),this._animation=new N(this.animation,this.easing,a,h,l,m),this._animation.translate(B(o%1)),this.percent=o,t.update(null,a),t.update(null,h)}}},end:function(){if(w(A,"scroll",this.unbindMove),this.unbindMove(),w(c,C,this.end,!0),this.dragging){var t=this.percent;this.percent=B(this.percent)%1,this.index=this.getIndex(this.index-_(t)),(this.percent<.1||t<0==this.pos>this.prevPos)&&(this.index=this.getIndex(t>0?"previous":"next"),this.percent=1-this.percent,t*=-1),this._animation&&this._animation.reset(),this.show(t>0?"previous":"next",!0),k()}this.drag=this.dragging=this.percent=null},show:function(t,e){var n=this;if(void 0===e&&(e=!1),e||!this.drag)if(this.stack[e?"unshift":"push"](t),!e&&this.stack.length>1)2===this.stack.length&&this._animation.forward(250);else{var i=this.index,o=this.getIndex(t),r=p(this.slides,"uk-active")&&this.slides[i],s=this.slides[o];if(r!==s){r&&S(r,"beforeitemhide",[this]),S(s,"beforeitemshow",[this]),this.index=o;var a=function(){r&&S(r,"itemhidden",[n]),S(s,"itemshown",[n]),u.write(function(){n.stack.shift(),n.stack.length?n.show(n.stack.shift(),!0):n._animation=null})};(r||this.initialAnimation)&&this._show(r?this.animation:this.Animations[this.initialAnimation],e?"cubic-bezier(0.165, 0.840, 0.440, 1.000)":this.easing,r,s,"next"===(l=t)?1:"previous"===l?-1:l<i?-1:1,this.stack.length>1,a);var l;r&&S(r,"itemhide",[this]),S(s,"itemshow",[this]),r||this.initialAnimation||a(),r&&u.flush()}else this.stack[e?"shift":"pop"]()}},_show:function(t,e,n,i,o,r,s){this._animation=new N(t,e,n,i,o,s),this._animation.show(n===i?300:r?150:this.duration,this.percent,r)},getIndex:function(t){return void 0===t&&(t=this.index),d(t,this.slides,this.index)},startAutoplay:function(){var t=this;this.stopAutoplay(),this.autoplay&&(this.interval=setInterval(function(){t.isHovering&&t.pauseOnHover||t.stack.length||t.show("next")},this.autoplayInterval))},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}}}function N(t,e,n,i,o,r){var s=t.percent,l=t.translate,c=(0,t.show)(o);return{animation:t,dir:o,current:n,next:i,show:function(t,s,a){var l=this;void 0===s&&(s=0);var h=a?"linear":e;return t-=Math.round(t*s),this.translate(s),D(i,"itemin",{percent:s,duration:t,ease:h,dir:o}),n&&D(n,"itemout",{percent:1-s,duration:t,ease:h,dir:o}),L.all([M.start(i,c[1],t,h),n&&M.start(n,c[0],t,h)]).then(function(){l.reset(),r()},m)},stop:function(){return M.stop([i,n])},cancel:function(){M.cancel([i,n])},reset:function(){for(var t in c[0])a([i,n],t,"")},forward:function(t){var e=this.percent();M.cancel([i,n]),this.show(t,e,!0)},translate:function(t){var e=l(t,o);a(i,e[1]),n&&a(n,e[0]),D(i,"itemtranslatein",{percent:t,dir:o}),n&&D(n,"itemtranslateout",{percent:1-t,dir:o})},percent:function(){return s(n,i,o)}}}function D(t,e,n){S(t,s(e,!1,!1,n))}function _(t){return~~t}}var Di=function(t){var e=t.mixin,n=t.util,i=n.assign,o=n.css;return i({},e.slideshow.defaults.Animations,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:Bi(.8)},{opacity:1,transform:Bi(1)}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:Bi(1-.2*t)},{opacity:t,transform:Bi(.8+.2*t)}]}}})};function _i(t){if(!_i.installed){t.use(Ni);var e=t.mixin,n=t.util,i=n.$,o=n.$$,r=n.addClass,s=n.ajax,a=n.append,l=n.assign,c=n.attr,h=n.css,u=n.doc,d=n.docEl,f=n.data,p=n.getImage,g=n.html,v=n.index,m=n.on,w=n.pointerDown,y=n.pointerMove,x=n.removeClass,b=n.Transition,C=n.trigger;t.component("lightbox",{attrs:!0,props:{animation:String,toggle:String,autoplay:Boolean,autoplayInterval:Number,videoAutoplay:Boolean},defaults:{animation:void 0,toggle:"a",autoplay:0,videoAutoplay:!1},computed:{toggles:function(t,e){var n=this,i=t.toggle,r=o(i,e);return this._changed=!this._toggles||r.length!==this._toggles.length||r.some(function(t,e){return t!==n._toggles[e]}),this._toggles=r}},disconnected:function(){this.panel&&(this.panel.$destroy(!0),this.panel=null)},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),t.current.blur(),this.show(v(this.toggles,t.current))}}],update:function(){this.panel&&this.animation&&(this.panel.$props.animation=this.animation,this.panel.$emit()),this.toggles.length&&this._changed&&this.panel&&(this.panel.$destroy(!0),this._init())},methods:{_init:function(){return this.panel=this.panel||t.lightboxPanel(l({},this.$props,{items:this.toggles.reduce(function(t,e){return t.push(["href","caption","type","poster"].reduce(function(t,n){return t["href"===n?"source":n]=f(e,n),t},{})),t},[])}))},show:function(t){return this.panel||this._init(),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}}),t.component("lightbox-panel",{mixins:[e.container,e.togglable,e.slideshow],functional:!0,defaults:{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",initialAnimation:"scale",pauseOnHover:!1,velocity:2,Animations:Di(t),template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close uk-toggle="!.uk-lightbox"></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href="#" uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href="#" uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'},created:function(){var t=this;this.$mount(a(this.container,this.template)),this.caption=i(".uk-lightbox-caption",this.$el),this.items.forEach(function(e,n){return a(t.list,"<li></li>")})},events:[{name:y+" "+w+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.selList+" > *"},handler:function(t){t.preventDefault(),this.hide()}},{name:"show",self:!0,handler:function(){r(d,this.clsPage)}},{name:"shown",self:!0,handler:"showControls"},{name:"hide",self:!0,handler:"hideControls"},{name:"hidden",self:!0,handler:function(){x(d,this.clsPage)}},{name:"keyup",el:function(){return u},handler:function(t){if(this.isToggled(this.$el))switch(t.keyCode){case 27:this.hide();break;case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"toggle",handler:function(t){t.preventDefault(),this.toggle()}},{name:"beforeitemshow",self:!0,delegate:function(){return this.selList+" > *"},handler:function(){this.isToggled()||this.toggleNow(this.$el,!0)}},{name:"itemshow",self:!0,delegate:function(){return this.selList+" > *"},handler:function(t){var e=t.target,n=v(e),i=this.getItem(n).caption;h(this.caption,"display",i?"":"none"),g(this.caption,i);for(var o=0;o<=this.preload;o++)this.loadItem(this.getIndex(n+o)),this.loadItem(this.getIndex(n-o))}},{name:"itemload",handler:function(t,e){var n,o=this,r=e.source,a=e.type;if(this.setItem(e,"<span uk-spinner></span>"),r)if("image"===a||r.match(/\.(jp(e)?g|png|gif|svg)$/i))p(r).then(function(t){return o.setItem(e,'<img width="'+t.width+'" height="'+t.height+'" src="'+r+'">')},function(){return o.setError(e)});else if("video"===a||r.match(/\.(mp4|webm|ogv)$/i)){var l=i("<video controls playsinline"+(e.poster?' poster="'+e.poster+'"':"")+' uk-video="autoplay: '+this.videoAutoplay+'"></video>');c(l,"src",r),m(l,"error",function(){return o.setError(e)}),m(l,"loadedmetadata",function(){c(l,{width:l.videoWidth,height:l.videoHeight}),o.setItem(e,l)})}else if("iframe"===a)this.setItem(e,'<iframe class="uk-lightbox-iframe" src="'+r+'" frameborder="0" allowfullscreen></iframe>');else if(n=r.match(/\/\/.*?youtube\.[a-z]+\/watch\?v=([^&\s]+)/)||r.match(/youtu\.be\/(.*)/)){var h=n[1],u=function(t,n){return void 0===t&&(t=640),void 0===n&&(n=450),o.setItem(e,k("//www.youtube.com/embed/"+h,t,n,o.videoAutoplay))};p("//img.youtube.com/vi/"+h+"/maxresdefault.jpg").then(function(t){var e=t.width,n=t.height;120===e&&90===n?p("//img.youtube.com/vi/"+h+"/0.jpg").then(function(t){var e=t.width,n=t.height;return u(e,n)},u):u(e,n)},u)}else(n=r.match(/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/))&&s("//vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(r),{responseType:"json"}).then(function(t){var i=t.response,r=i.height,s=i.width;return o.setItem(e,k("//player.vimeo.com/video/"+n[2],s,r,o.videoAutoplay))})}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},hide:function(){this.isToggled()&&this.toggleNow(this.$el,!1),x(this.slides,this.clsActive),b.stop(this.slides),delete this.index,delete this.percent,delete this._animation},loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);e.content||C(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[t]||{}},setItem:function(e,n){l(e,{content:n});var i=g(this.slides[this.items.indexOf(e)],n);C(this.$el,"itemloaded",[this,i]),t.update(null,i)},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),c(o("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el),"hidden",this.items.length<2?"":null),r(this.$el,"uk-active uk-transition-active")},hideControls:function(){x(this.$el,"uk-active uk-transition-active")}}})}function k(t,e,n,i){return'<iframe src="'+t+'" width="'+e+'" height="'+n+'" style="max-width: 100%; box-sizing: border-box;" frameborder="0" allowfullscreen uk-video="autoplay: '+i+'" uk-responsive></iframe>'}}function Hi(t){if(!Hi.installed){var e=t.util,n=e.append,i=e.closest,o=e.css,r=e.each,s=e.pointerEnter,a=e.pointerLeave,l=e.remove,c=e.toFloat,h=e.Transition,u=e.trigger,d={};t.component("notification",{functional:!0,args:["message","status"],defaults:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},created:function(){d[this.pos]||(d[this.pos]=n(t.container,'<div class="uk-notification uk-notification-'+this.pos+'"></div>'));var e=o(d[this.pos],"display","block");this.$mount(n(e,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href="#" class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},ready:function(){var t=this,e=c(o(this.$el,"marginBottom"));h.start(o(this.$el,{opacity:0,marginTop:-1*this.$el.offsetHeight,marginBottom:0}),{opacity:1,marginTop:0,marginBottom:e}).then(function(){t.timeout&&(t.timer=setTimeout(t.close,t.timeout))})},events:(f={click:function(t){i(t.target,'a[href="#"]')&&t.preventDefault(),this.close()}},f[s]=function(){this.timer&&clearTimeout(this.timer)},f[a]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},f),methods:{close:function(t){var e=this,n=function(){u(e.$el,"close",[e]),l(e.$el),d[e.pos].children.length||o(d[e.pos],"display","none")};this.timer&&clearTimeout(this.timer),t?n():h.start(this.$el,{opacity:0,marginTop:-1*this.$el.offsetHeight,marginBottom:0}).then(n)}}});var f;t.notification.closeAll=function(e,n){r(t.instances,function(t){"notification"!==t.$options.name||e&&e!==t.group||t.close(n)})}}}function Ii(t){if(!Ii.installed){var e=t.mixin,n=t.util,i=n.clamp,o=n.css,r=n.Dimensions,s=n.each,a=n.getImage,l=n.includes,c=n.isNumber,h=n.isUndefined,u=n.scrolledOver,d=n.toFloat,f=n.query,p=n.win,g=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity"];e.parallax={props:g.reduce(function(t,e){return t[e]="list",t},{media:"media"}),defaults:g.reduce(function(t,e){return t[e]=void 0,t},{media:!1}),computed:{props:function(t,e){var n=this;return g.reduce(function(i,r){if(h(t[r]))return i;var s,a,c,u=r.match(/color/i),f=u||"opacity"===r,p=t[r].slice(0);f&&o(e,r,""),p.length<2&&p.unshift(("scale"===r?1:f?o(e,r):0)||0);var g=l(p.join(""),"%")?"%":"px";if(u){var v=e.style.color;p=p.map(function(t){return o(o(e,"color",t),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(function(t){return d(t)})}),e.style.color=v}else p=p.map(d);if(r.match(/^bg/))if(o(e,"background-position-"+r[2],""),a=o(e,"backgroundPosition").split(" ")["x"===r[2]?0:1],n.covers){var m=Math.min.apply(Math,p),w=Math.max.apply(Math,p),y=p.indexOf(m)<p.indexOf(w);c=w-m,p=p.map(function(t){return t-(y?m:w)}),s=(y?-c:0)+"px"}else s=a;return i[r]={steps:p,unit:g,pos:s,bgPos:a,diff:c},i},{})},bgProps:function(){var t=this;return["bgx","bgy"].filter(function(e){return e in t.props})},covers:function(t,e){return"cover"===o(""!==e.style.backgroundSize?o(e,"backgroundSize",""):e,"backgroundSize")}},disconnected:function(){delete this._image},update:[{read:function(){var t=this;if(delete this._computeds.props,this._active=!this.media||p.matchMedia(this.media).matches,this._image&&(this._image.dimEl={width:this.$el.offsetWidth,height:this.$el.offsetHeight}),h(this._image)&&this.covers&&this.bgProps.length){var e=o(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");e&&(this._image=!1,a(e).then(function(e){t._image={width:e.naturalWidth,height:e.naturalHeight},t.$emit()}))}},write:function(){var t=this;if(this._image)if(this._active){var e=this._image,n=e.dimEl,i=r.cover(e,n);this.bgProps.forEach(function(o){var s=t.props[o],a=s.diff,l=s.bgPos,c=s.steps,h="bgy"===o?"height":"width",u=i[h]-n[h];l.match(/%$|0px/)&&(u<a?n[h]=i[h]+a-u:u>a&&(l=parseFloat(l))&&(t.props[o].steps=c.map(function(t){return t-(u-a)/(100/l)})),i=r.cover(e,n))}),o(this.$el,{backgroundSize:i.width+"px "+i.height+"px",backgroundRepeat:"no-repeat"})}else o(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["load","resize"]}],methods:{reset:function(){var t=this;s(this.getCss(0),function(e,n){return o(t.$el,n,"")})},getCss:function(t){var e=!1,n=this.props;return Object.keys(n).reduce(function(i,o){var r=n[o],s=r.steps,a=r.unit,l=r.pos,c=m(s,t);switch(o){case"x":case"y":if(e)break;var h=["x","y"].map(function(e){return o===e?c+a:n[e]?m(n[e].steps,t)+n[e].unit:0}),u=h[0],f=h[1];e=i.transform+=" translate3d("+u+", "+f+", 0)";break;case"rotate":i.transform+=" rotate("+c+"deg)";break;case"scale":i.transform+=" scale("+c+")";break;case"bgy":case"bgx":i["background-position-"+o[2]]="calc("+l+" + "+(c+a)+")";break;case"color":case"backgroundColor":case"borderColor":var p=v(s,t),g=p[0],w=p[1],y=p[2];i[o]="rgba("+g.map(function(t,e){return t+=y*(w[e]-t),3===e?d(t):parseInt(t,10)}).join(",")+")";break;case"blur":i.filter+=" blur("+c+"px)";break;case"hue":i.filter+=" hue-rotate("+c+"deg)";break;case"fopacity":i.filter+=" opacity("+c+"%)";break;case"grayscale":case"invert":case"saturate":case"sepia":i.filter+=" "+o+"("+c+"%)";break;default:i[o]=c}return i},{transform:"",filter:""})}}},t.component("parallax",{mixins:[e.parallax],props:{target:String,viewport:Number,easing:Number},defaults:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var n=t.target;return n&&f(n,e)||e}},disconnected:function(){delete this._prev},update:[{read:function(){this._percent=(t=u(this.target)/(this.viewport||1),e=this.easing,i(t*(1-(e-e*t))));var t,e},write:function(t){"scroll"!==t.type&&delete this._prev,this._active?this._prev!==this._percent&&(o(this.$el,this.getCss(this._percent)),this._prev=this._percent):this.reset()},events:["scroll","load","resize"]}]})}function v(t,e){var n=t.length-1,i=Math.min(Math.floor(n*e),n-1),o=t.slice(i,i+2);return o.push(1===e?1:e%(1/n)*n),o}function m(t,e){var n=v(t,e),i=n[0],o=n[1],r=n[2];return(c(i)?i+Math.abs(i-o)*r*(i<o?1:-1):+o).toFixed(2)}}var ji=function(t){var e=t.mixin,n=t.util,i=n.assign,o=n.css,r=i({},e.slideshow.defaults.Animations,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:Bi(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:Bi(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:Ai(30),zIndex:-1},{transform:Ai(),zIndex:0}]:[{transform:Ai(-100),zIndex:0},{transform:Ai(),zIndex:-1}]},percent:function(t,e,n){return n<0?1-r.translated(e):r.translated(t)},translate:function(t,e){return e<0?[{transform:Ai(30*t),zIndex:-1},{transform:Ai(-100*(1-t)),zIndex:0}]:[{transform:Ai(100*-t),zIndex:0},{transform:Ai(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:Ai(100),zIndex:0},{transform:Ai(),zIndex:-1}]:[{transform:Ai(-30),zIndex:-1},{transform:Ai(),zIndex:0}]},percent:function(t,e,n){return n>0?1-r.translated(e):r.translated(t)},translate:function(t,e){return e<0?[{transform:Ai(100*t),zIndex:0},{transform:Ai(-30*(1-t)),zIndex:-1}]:[{transform:Ai(-30*t),zIndex:-1},{transform:Ai(100*(1-t)),zIndex:0}]}}});return r};function Oi(t){if(!Oi.installed){t.use(Ii),t.use(Ni);var e=t.mixin,n=t.util,i=n.closest,o=n.css,r=n.fastdom,s=n.endsWith,a=n.height,l=n.noop,c=n.Transition;t.component("slideshow",{mixins:[e.class,e.slideshow],props:{ratio:String,minHeight:Boolean,maxHeight:Boolean},defaults:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",Animations:ji(t)},ready:function(){var t=this;r.write(function(){return t.show(t.index)})},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],n=t[1];this.height=n*this.$el.offsetWidth/e,this.minHeight&&(this.height=Math.max(this.minHeight,this.height)),this.maxHeight&&(this.height=Math.min(this.maxHeight,this.height))},write:function(){a(this.list,Math.floor(this.height))},events:["load","resize"]}}),t.component("slideshow-parallax",{mixins:[e.parallax],computed:{item:function(){var e=t.getComponent(i(this.$el,".uk-slideshow"),"slideshow");return e&&i(this.$el,e.selList+" > *")}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){o(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.duration,s=n.ease,a=n.dir;c.cancel(this.$el),o(this.$el,this.getCss(u(e,a,i))),c.start(this.$el,this.getCss(h(e)?.5:a>0?1:0),r,s).catch(l)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){c.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.dir;c.cancel(this.$el),o(this.$el,this.getCss(u(e,r,i)))}}]})}function h(t){return s(t,"in")}function u(t,e,n){return n/=2,h(t)?e<0?1-n:n:e<0?n:1-n}}function Pi(t){if(!Pi.installed){var e=t.mixin,n=t.util,i=n.addClass,o=n.after,r=n.assign,s=n.append,a=n.attr,l=n.before,c=n.closest,h=n.css,u=n.doc,d=n.docEl,f=n.height,p=n.fastdom,g=n.getPos,v=n.includes,m=n.index,w=n.isInput,y=n.noop,x=n.offset,b=n.off,C=n.on,k=n.pointerDown,L=n.pointerMove,T=n.pointerUp,$=n.position,E=n.preventClick,M=n.Promise,S=n.remove,A=n.removeClass,B=n.toggleClass,N=n.toNodes,D=n.Transition,_=n.trigger,H=n.win,I=n.within;t.component("sortable",{mixins:[e.class],props:{group:String,animation:Number,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},defaults:{group:!1,animation:150,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1},init:function(){var t=this;["init","start","move","end"].forEach(function(e){var n=t[e];t[e]=function(e){t.scrollY=H.scrollY;var i=g(e),o=i.x,r=i.y;t.pos={x:o,y:r},n(e)}})},events:(j={},j[k]="init",j),update:{write:function(){if(this.clsEmpty&&B(this.$el,this.clsEmpty,!this.$el.children.length),this.drag){x(this.drag,{top:this.pos.y+this.origin.top,left:this.pos.x+this.origin.left});var t,e=x(this.drag).top,n=e+this.drag.offsetHeight;e>0&&e<this.scrollY?t=this.scrollY-5:n<f(u)&&n>f(H)+this.scrollY&&(t=this.scrollY+5),t&&setTimeout(function(){return H.scrollTo(H.scrollX,t)},5)}}},methods:{init:function(t){var e=t.target,n=t.button,i=t.defaultPrevented,o=N(this.$el.children).filter(function(t){return I(e,t)})[0];!o||w(t.target)||this.handle&&!I(e,this.handle)||n>0||I(e,"."+this.clsNoDrag)||i||(t.preventDefault(),this.touched=[this],this.placeholder=o,this.origin=r({target:e,index:m(o)},this.pos),C(d,L,this.move),C(d,T,this.end),C(H,"scroll",this.scroll),this.threshold||this.start(t))},start:function(e){this.drag=s(t.container,this.placeholder.outerHTML.replace(/^<li/i,"<div").replace(/li>$/i,"div>")),h(this.drag,r({boxSizing:"border-box",width:this.placeholder.offsetWidth,height:this.placeholder.offsetHeight},h(this.placeholder,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),a(this.drag,"uk-no-boot",""),i(this.drag,this.clsDrag+" "+this.clsCustom),f(this.drag.firstElementChild,f(this.placeholder.firstElementChild));var n=x(this.placeholder),o=n.left,l=n.top;r(this.origin,{left:o-this.pos.x,top:l-this.pos.y}),i(this.placeholder,this.clsPlaceholder),i(this.$el.children,this.clsItem),i(d,this.clsDragState),_(this.$el,"start",[this,this.placeholder,this.drag]),this.move(e)},move:function(t){if(this.drag){this.$emit();var e="mousemove"===t.type?t.target:u.elementFromPoint(this.pos.x-u.body.scrollLeft,this.pos.y-u.body.scrollTop),n=O(e),i=O(this.placeholder),o=n!==i;if(n&&!I(e,this.placeholder)&&(!o||n.group&&n.group===i.group)){if(e=n.$el===e.parentNode&&e||N(n.$el.children).filter(function(t){return I(e,t)})[0],o)i.remove(this.placeholder);else if(!e)return;n.insert(this.placeholder,e),v(this.touched,n)||this.touched.push(n)}}else(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},scroll:function(){var t=H.scrollY;t!==this.scrollY&&(this.pos.y+=t-this.scrollY,this.scrollY=t,this.$emit())},end:function(t){if(b(d,L,this.move),b(d,T,this.end),b(H,"scroll",this.scroll),this.drag){E();var e=O(this.placeholder);this===e?this.origin.index!==m(this.placeholder)&&_(this.$el,"moved",[this,this.placeholder]):(_(e.$el,"added",[e,this.placeholder]),_(this.$el,"removed",[this,this.placeholder])),_(this.$el,"stop",[this]),S(this.drag),this.drag=null;var n=this.touched.map(function(t){return t.clsPlaceholder+" "+t.clsItem}).join(" ");this.touched.forEach(function(t){return A(t.$el.children,n)}),A(d,this.clsDragState)}else"mouseup"!==t.type&&I(t.target,"a[href]")&&(location.href=c(t.target,"a[href]").href)},insert:function(t,e){var n=this;i(this.$el.children,this.clsItem);var r=function(){e?!I(t,n.$el)||(i=t,r=e,i.parentNode===r.parentNode&&m(i)>m(r))?l(e,t):o(e,t):s(n.$el,t);var i,r};this.animation?this.animate(r):r()},remove:function(t){I(t,this.$el)&&(this.animation?this.animate(function(){return S(t)}):S(t))},animate:function(t){var e=this,n=[],i=N(this.$el.children),o={position:"",width:"",height:"",pointerEvents:"",top:"",left:"",bottom:"",right:""};i.forEach(function(t){n.push(r({position:"absolute",pointerEvents:"none",width:t.offsetWidth,height:t.offsetHeight},$(t)))}),t(),i.forEach(D.cancel),h(this.$el.children,o),this.$update("update",!0),p.flush(),h(this.$el,"minHeight",f(this.$el));var s=i.map(function(t){return $(t)});M.all(i.map(function(t,i){return D.start(h(t,n[i]),s[i],e.animation)})).then(function(){h(e.$el,"minHeight",""),h(i,o),e.$update("update",!0),p.flush()},y)}}});var j}function O(e){return e&&(t.getComponent(e,"sortable")||O(e.parentNode))}}function qi(t){if(!qi.installed){var e=t.util,n=t.mixin,i=e.append,o=e.attr,r=e.doc,s=e.fastdom,a=e.flipPosition,l=e.includes,c=e.isTouch,h=e.isVisible,u=e.matches,d=e.on,f=e.pointerDown,p=e.pointerEnter,g=e.pointerLeave,v=e.remove,m=e.within,w=[];t.component("tooltip",{attrs:!0,mixins:[n.container,n.togglable,n.position],props:{delay:Number,title:String},defaults:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},connected:function(){var t=this;s.write(function(){return o(t.$el,{title:null,"aria-expanded":!1})})},disconnected:function(){this.hide()},methods:{show:function(){var t=this;l(w,this)||(w.forEach(function(t){return t.hide()}),w.push(this),this._unbind=d(r,"click",function(e){return!m(e.target,t.$el)&&t.hide()}),clearTimeout(this.showTimer),this.tooltip=i(this.container,'<div class="'+this.clsPos+'" aria-hidden><div class="'+this.clsPos+'-inner">'+this.title+"</div></div>"),o(this.$el,"aria-expanded",!0),this.positionAt(this.tooltip,this.$el),this.origin="y"===this.getAxis()?a(this.dir)+"-"+this.align:this.align+"-"+a(this.dir),this.showTimer=setTimeout(function(){t.toggleElement(t.tooltip,!0),t.hideTimer=setInterval(function(){h(t.$el)||t.hide()},150)},this.delay))},hide:function(){var t=w.indexOf(this);!~t||u(this.$el,"input")&&this.$el===r.activeElement||(w.splice(t,1),clearTimeout(this.showTimer),clearInterval(this.hideTimer),o(this.$el,"aria-expanded",!1),this.toggleElement(this.tooltip,!1),this.tooltip&&v(this.tooltip),this.tooltip=!1,this._unbind())}},events:(y={blur:"hide"},y["focus "+p+" "+f]=function(t){t.type===f&&c(t)||this.show()},y[g]=function(t){c(t)||this.hide()},y)});var y}}function zi(t){if(!zi.installed){var e=t.util,n=e.addClass,i=e.ajax,o=e.matches,r=e.noop,s=e.on,a=e.removeClass,l=e.trigger;t.component("upload",{props:{allow:String,clsDragover:String,concurrent:Number,mime:String,msgInvalidMime:String,msgInvalidName:String,multiple:Boolean,name:String,params:Object,type:String,url:String},defaults:{allow:!1,clsDragover:"uk-dragover",concurrent:1,mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",multiple:!1,name:"files[]",params:{},type:"POST",url:"",abort:r,beforeAll:r,beforeSend:r,complete:r,completeAll:r,error:r,fail:r,load:r,loadEnd:r,loadStart:r,progress:r},events:{change:function(t){o(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){h(t);var e=t.dataTransfer;e&&e.files&&(a(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){h(t)},dragover:function(t){h(t),n(this.$el,this.clsDragover)},dragleave:function(t){h(t),a(this.$el,this.clsDragover)}},methods:{upload:function(t){var e=this;if(t.length){l(this.$el,"upload",[t]);for(var n=0;n<t.length;n++){if(e.allow&&!c(e.allow,t[n].name))return void e.fail(e.msgInvalidName.replace(/%s/,e.allow));if(e.mime&&!c(e.mime,t[n].type))return void e.fail(e.msgInvalidMime.replace(/%s/,e.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var o=function(t,e){for(var n=[],i=0;i<t.length;i+=e){for(var o=[],r=0;r<e;r++)o.push(t[i+r]);n.push(o)}return n}(t,this.concurrent),r=function(t){var n=new FormData;t.forEach(function(t){return n.append(e.name,t)});for(var a in e.params)n.append(a,e.params[a]);i(e.url,{data:n,method:e.type,beforeSend:function(t){var n=t.xhr;n.upload&&s(n.upload,"progress",e.progress),["loadStart","load","loadEnd","abort"].forEach(function(t){return s(n,t.toLowerCase(),e[t])}),e.beforeSend(t)}}).then(function(t){e.complete(t),o.length?r(o.shift()):e.completeAll(t)},function(t){return e.error(t.message)})};r(o.shift())}}}})}function c(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function h(t){t.preventDefault(),t.stopPropagation()}}return zn.use(Ei),zn.use(Mi),zn.use(_i),zn.use(Hi),zn.use(Ii),zn.use(Oi),zn.use(Pi),zn.use(qi),zn.use(zi),function(t){var e=t.connect,n=t.disconnect;De?tt.body?i():new De(function(){tt.body&&(this.disconnect(),i())}).observe(et,{childList:!0,subtree:!0}):ot(function(){o(tt.body,e),Ue(et,"DOMNodeInserted",function(t){return o(t.target,e)}),Ue(et,"DOMNodeRemoved",function(t){return o(t.target,n)})});function i(){o(tt.body,e),nn.flush(),new De(function(i){return i.forEach(function(i){for(var r=i.addedNodes,s=i.removedNodes,a=i.target,l=0;l<r.length;l++)o(r[l],e);for(l=0;l<s.length;l++)o(s[l],n);t.update(Je("update",!0,!1,{mutation:!0}),a,!0)})}).observe(et,{childList:!0,subtree:!0,characterData:!0,attributes:!0,attributeFilter:["href"]}),t._initialized=!0}function o(t,e){if(1===t.nodeType&&!le(t,"uk-no-boot"))for(e(t),t=t.firstElementChild;t;){var n=t.nextElementSibling;o(t,e),t=n}}}(zn),zn}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define("uikiticons",e):t.UIkitIcons=e()}(this,function(){"use strict";function t(n){t.installed||n.icon.add(e)}var e={album:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="5" y="2" width="10" height="1"></rect> <rect x="3" y="4" width="14" height="1"></rect> <rect fill="none" stroke="#000" x="1.5" y="6.5" width="17" height="11"></rect></svg>',ban:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"></circle> <line fill="none" stroke="#000" stroke-width="1.1" x1="4" y1="3.5" x2="16" y2="16.5"></line></svg>',behance:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z"></path> <path d="M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z"></path> <rect x="13" y="4" width="5" height="1.4"></rect></svg>',bell:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z"></path> <path fill="none" stroke="#000" d="M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16"></path></svg>',bold:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z"></path></svg>',bolt:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z"></path></svg>',bookmark:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5"></polygon></svg>',calendar:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z"></path> <rect width="1" height="3" x="6" y="2"></rect> <rect width="1" height="3" x="13" y="2"></rect></svg>',camera:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10.8" r="3.8"></circle> <path fill="none" stroke="#000" d="M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z"></path></svg>',cart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="7.3" cy="17.3" r="1.4"></circle> <circle cx="13.3" cy="17.3" r="1.4"></circle> <polyline fill="none" stroke="#000" points="0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5"></polyline></svg>',check:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.1" points="4,10 8,15 17,4"></polyline></svg>',clock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"></circle> <rect x="9" y="4" width="1" height="7"></rect> <path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625"></path></svg>',close:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.06" d="M16,16 L4,4"></path> <path fill="none" stroke="#000" stroke-width="1.06" d="M16,4 L4,16"></path></svg>',code:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.01" points="13,4 19,10 13,16"></polyline> <polyline fill="none" stroke="#000" stroke-width="1.01" points="7,4 1,10 7,16"></polyline></svg>',cog:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" cx="9.997" cy="10" r="3.31"></circle> <path fill="none" stroke="#000" d="M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z"></path></svg>',comment:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z"></path></svg>',commenting:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5"></polygon> <circle cx="10" cy="8" r="1"></circle> <circle cx="6" cy="8" r="1"></circle> <circle cx="14" cy="8" r="1"></circle></svg>',comments:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="2 0.5 19.5 0.5 19.5 13"></polyline> <path d="M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z"></path></svg>',copy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="2.5" width="12" height="16"></rect> <polyline fill="none" stroke="#000" points="5 0.5 17.5 0.5 17.5 17"></polyline></svg>',database:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <ellipse fill="none" stroke="#000" cx="10" cy="4.64" rx="7.5" ry="3.14"></ellipse> <path fill="none" stroke="#000" d="M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11"></path> <path fill="none" stroke="#000" d="M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25"></path> <path fill="none" stroke="#000" d="M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64"></path></svg>',desktop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="8" y="15" width="1" height="2"></rect> <rect x="11" y="15" width="1" height="2"></rect> <rect x="5" y="16" width="10" height="1"></rect> <rect fill="none" stroke="#000" x="1.5" y="3.5" width="17" height="11"></rect></svg>',download:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="14,10 9.5,14.5 5,10"></polyline> <rect x="3" y="17" width="13" height="1"></rect> <line fill="none" stroke="#000" x1="9.5" y1="13.91" x2="9.5" y2="3"></line></svg>',dribbble:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.4" d="M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5"></path> <path fill="none" stroke="#000" stroke-width="1.4" d="M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6"></path> <path fill="none" stroke="#000" stroke-width="1.4" d="M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4"></path> <circle fill="none" stroke="#000" stroke-width="1.4" cx="10" cy="10" r="9"></circle></svg>',expand:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="13 2 18 2 18 7 17 7 17 3 13 3"></polygon> <polygon points="2 13 3 13 3 17 7 17 7 18 2 18"></polygon> <path fill="none" stroke="#000" stroke-width="1.1" d="M11,9 L17,3"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M3,17 L9,11"></path></svg>',facebook:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z"></path></svg>',file:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="1.5" width="13" height="17"></rect></svg>',flickr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="5.5" cy="9.5" r="3.5"></circle> <circle cx="14.5" cy="9.5" r="3.5"></circle></svg>',folder:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5"></polygon></svg>',forward:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z"></path></svg>',foursquare:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z"></path></svg>',future:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline points="19 2 18 2 18 6 14 6 14 7 19 7 19 2"></polyline> <path fill="none" stroke="#000" stroke-width="1.1" d="M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10"></path> <rect x="9" y="4" width="1" height="7"></rect> <path d="M13.018,14.197 L9.445,10.625" fill="none" stroke="#000" stroke-width="1.1"></path></svg>',github:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z"></path></svg>',gitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="3.5" y="1" width="1.531" height="11.471"></rect> <rect x="7.324" y="4.059" width="1.529" height="15.294"></rect> <rect x="11.148" y="4.059" width="1.527" height="15.294"></rect> <rect x="14.971" y="4.059" width="1.529" height="8.412"></rect></svg>',google:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z"></path></svg>',grid:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="2" y="2" width="3" height="3"></rect> <rect x="8" y="2" width="3" height="3"></rect> <rect x="14" y="2" width="3" height="3"></rect> <rect x="2" y="8" width="3" height="3"></rect> <rect x="8" y="8" width="3" height="3"></rect> <rect x="14" y="8" width="3" height="3"></rect> <rect x="2" y="14" width="3" height="3"></rect> <rect x="8" y="14" width="3" height="3"></rect> <rect x="14" y="14" width="3" height="3"></rect></svg>',happy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="13" cy="7" r="1"></circle> <circle cx="7" cy="7" r="1"></circle> <circle fill="none" stroke="#000" cx="10" cy="10" r="8.5"></circle> <path fill="none" stroke="#000" d="M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4"></path></svg>',hashtag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z"></path></svg>',heart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.03" d="M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z"></path></svg>',history:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="#000" points="1 2 2 2 2 6 6 6 6 7 1 7 1 2"></polyline> <path fill="none" stroke="#000" stroke-width="1.1" d="M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10"></path> <rect x="9" y="4" width="1" height="7"></rect> <path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625" id="Shape"></path></svg>',home:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65"></polygon> <polygon points="15 4 18 4 18 7 17 7 17 5 15 5"></polygon> <polygon points="3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19"></polygon></svg>',image:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="16.1" cy="6.1" r="1.1"></circle> <rect fill="none" stroke="#000" x="0.5" y="2.5" width="19" height="15"></rect> <polyline fill="none" stroke="#000" stroke-width="1.01" points="4,13 8,9 13,14"></polyline> <polyline fill="none" stroke="#000" stroke-width="1.01" points="11,12 12.5,10.5 16,14"></polyline></svg>',info:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z"></path> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"></circle></svg>',instagram:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z"></path> <circle cx="14.87" cy="5.26" r="1.09"></circle> <path d="M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z"></path></svg>',italic:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z"></path></svg>',joomla:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z"></path> <path d="M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8"></path> <path d="M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8"></path> <path d="M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7"></path></svg>',laptop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect y="16" width="20" height="1"></rect> <rect fill="none" stroke="#000" x="2.5" y="4.5" width="15" height="10"></rect></svg>',lifesaver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z"></path></svg>',link:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M7.925,11.875 L11.925,7.975"></path></svg>',linkedin:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z"></path> <path d="M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z"></path></svg>',list:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="6" y="4" width="12" height="1"></rect> <rect x="6" y="9" width="12" height="1"></rect> <rect x="6" y="14" width="12" height="1"></rect> <rect x="2" y="4" width="2" height="1"></rect> <rect x="2" y="9" width="2" height="1"></rect> <rect x="2" y="14" width="2" height="1"></rect></svg>',location:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.01" d="M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z"></path> <circle fill="none" stroke="#000" cx="10" cy="6.8" r="2.3"></circle></svg>',lock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" height="10" width="13" y="8.5" x="3.5"></rect> <path fill="none" stroke="#000" d="M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8"></path></svg>',mail:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="1.4,6.5 10,11 18.6,6.5"></polyline> <path d="M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z"></path></svg>',menu:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="2" y="4" width="16" height="1"></rect> <rect x="2" y="9" width="16" height="1"></rect> <rect x="2" y="14" width="16" height="1"></rect></svg>',minus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect height="1" width="18" y="9" x="1"></rect></svg>',more:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="3" cy="10" r="2"></circle> <circle cx="10" cy="10" r="2"></circle> <circle cx="17" cy="10" r="2"></circle></svg>',move:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="4,5 1,5 1,9 2,9 2,6 4,6 "></polygon> <polygon points="1,16 2,16 2,18 4,18 4,19 1,19 "></polygon> <polygon points="14,16 14,19 11,19 11,18 13,18 13,16 "></polygon> <rect fill="none" stroke="#000" x="5.5" y="1.5" width="13" height="13"></rect> <rect x="1" y="11" width="1" height="3"></rect> <rect x="6" y="18" width="3" height="1"></rect></svg>',nut:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3"></polygon> <circle fill="none" stroke="#000" cx="10" cy="10" r="3.5"></circle></svg>',pagekit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19 "></polygon></svg>',pencil:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z"></path> <path fill="none" stroke="#000" d="M15.98,7.268 L13.851,5.148"></path></svg>',phone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z"></path> <circle cx="10.5" cy="16.5" r="0.8"></circle></svg>',pinterest:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1"></path></svg>',play:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="6.5,5 14.5,10 6.5,15"></polygon></svg>',plus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="9" y="1" width="1" height="17"></rect> <rect x="1" y="9" width="17" height="1"></rect></svg>',pull:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7"></polygon> <line fill="none" stroke="#000" x1="9.5" y1="11" x2="9.5" y2="2"></line> <polyline fill="none" stroke="#000" points="6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5"></polyline></svg>',push:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3"></polygon> <line fill="none" stroke="#000" x1="9.5" y1="10" x2="9.5" y2="1"></line> <polyline fill="none" stroke="#000" points="6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5"></polyline></svg>',question:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"></circle> <circle cx="10.44" cy="14.42" r="1.05"></circle> <path fill="none" stroke="#000" stroke-width="1.2" d="M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75"></path></svg>',receiver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.01" d="M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611"></path></svg>',refresh:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5"></path> <polyline fill="none" stroke="#000" points="9.9 2 12.79 4.89 9.79 7.9"></polyline></svg>',reply:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z"></path></svg>',rss:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="3.12" cy="16.8" r="1.85"></circle> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5"></path></svg>',search:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"></circle> <path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"></path></svg>',server:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="3" y="3" width="1" height="2"></rect> <rect x="5" y="3" width="1" height="2"></rect> <rect x="7" y="3" width="1" height="2"></rect> <rect x="16" y="3" width="1" height="1"></rect> <rect x="16" y="10" width="1" height="1"></rect> <circle fill="none" stroke="#000" cx="9.9" cy="17.4" r="1.4"></circle> <rect x="3" y="10" width="1" height="2"></rect> <rect x="5" y="10" width="1" height="2"></rect> <rect x="9.5" y="14" width="1" height="2"></rect> <rect x="3" y="17" width="6" height="1"></rect> <rect x="11" y="17" width="6" height="1"></rect> <rect fill="none" stroke="#000" x="1.5" y="1.5" width="17" height="5"></rect> <rect fill="none" stroke="#000" x="1.5" y="8.5" width="17" height="5"></rect></svg>',settings:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <ellipse fill="none" stroke="#000" cx="6.11" cy="3.55" rx="2.11" ry="2.15"></ellipse> <ellipse fill="none" stroke="#000" cx="6.11" cy="15.55" rx="2.11" ry="2.15"></ellipse> <circle fill="none" stroke="#000" cx="13.15" cy="9.55" r="2.15"></circle> <rect x="1" y="3" width="3" height="1"></rect> <rect x="10" y="3" width="8" height="1"></rect> <rect x="1" y="9" width="8" height="1"></rect> <rect x="15" y="9" width="3" height="1"></rect> <rect x="1" y="15" width="3" height="1"></rect> <rect x="10" y="15" width="8" height="1"></rect></svg>',shrink:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="11 4 12 4 12 8 16 8 16 9 11 9"></polygon> <polygon points="4 11 9 11 9 16 8 16 8 12 4 12"></polygon> <path fill="none" stroke="#000" stroke-width="1.1" d="M12,8 L18,2"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M2,18 L8,12"></path></svg>',social:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <line fill="none" stroke="#000" stroke-width="1.1" x1="13.4" y1="14" x2="6.3" y2="10.7"></line> <line fill="none" stroke="#000" stroke-width="1.1" x1="13.5" y1="5.5" x2="6.5" y2="8.8"></line> <circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="4.6" r="2.3"></circle> <circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="14.8" r="2.3"></circle> <circle fill="none" stroke="#000" stroke-width="1.1" cx="4.5" cy="9.8" r="2.3"></circle></svg>',soundcloud:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z"></path> <rect x="6" y="6.5" width="1.5" height="8.5"></rect> <rect x="3" y="8" width="1.5" height="7"></rect> <rect y="10" width="1.5" height="5"></rect></svg>',star:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" stroke-width="1.01" points="10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27"></polygon></svg>',strikethrough:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z"></path> <rect x="3" y="10" width="15" height="1"></rect></svg>',table:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="1" y="3" width="18" height="1"></rect> <rect x="1" y="7" width="18" height="1"></rect> <rect x="1" y="11" width="18" height="1"></rect> <rect x="1" y="15" width="18" height="1"></rect></svg>',tablet:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z"></path> <circle cx="10.5" cy="16.3" r="0.8"></circle></svg>',tag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z"></path> <circle cx="14" cy="6" r="1"></circle></svg>',thumbnails:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="3.5" width="5" height="5"></rect> <rect fill="none" stroke="#000" x="11.5" y="3.5" width="5" height="5"></rect> <rect fill="none" stroke="#000" x="11.5" y="11.5" width="5" height="5"></rect> <rect fill="none" stroke="#000" x="3.5" y="11.5" width="5" height="5"></rect></svg>',trash:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="6.5 3 6.5 1.5 13.5 1.5 13.5 3"></polyline> <polyline fill="none" stroke="#000" points="4.5 4 4.5 18.5 15.5 18.5 15.5 4"></polyline> <rect x="8" y="7" width="1" height="9"></rect> <rect x="11" y="7" width="1" height="9"></rect> <rect x="2" y="3" width="16" height="1"></rect></svg>',tripadvisor:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z"></path></svg>',tumblr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z"></path></svg>',tv:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="7" y="16" width="6" height="1"></rect> <rect fill="none" stroke="#000" x="0.5" y="3.5" width="19" height="11"></rect></svg>',twitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74"></path></svg>',uikit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3"></polygon> <polygon points="9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3"></polygon></svg>',unlock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="8.5" width="13" height="10"></rect> <path fill="none" stroke="#000" d="M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9"></path></svg>',upload:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="5 8 9.5 3.5 14 8 "></polyline> <rect x="3" y="17" width="13" height="1"></rect> <line fill="none" stroke="#000" x1="9.5" y1="15" x2="9.5" y2="4"></line></svg>',user:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.9" cy="6.4" r="4.4"></circle> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2"></path></svg>',users:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="7.7" cy="8.6" r="3.5"></circle> <path fill="none" stroke="#000" stroke-width="1.1" d="M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1"></path></svg>',vimeo:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z"></path></svg>',warning:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="10" cy="14" r="1"></circle> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"></circle> <path d="M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z"></path></svg>',whatsapp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9"></path></svg>',wordpress:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z"></path></svg>',world:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M1,10.5 L19,10.5"></path> <path fill="none" stroke="#000" d="M2.35,15.5 L17.65,15.5"></path> <path fill="none" stroke="#000" d="M2.35,5.5 L17.523,5.5"></path> <path fill="none" stroke="#000" d="M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z"></path> <circle fill="none" stroke="#000" cx="10" cy="10.5" r="9"></circle></svg>',xing:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z"></path> <path d="M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z"></path></svg>',yelp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z"></path></svg>',youtube:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z"></path></svg>',"500px":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719\t\tc0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449\t\tc-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045\t\tc-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z"></path> <path d="M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066\t\tc0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564\t\tc0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271\t\tc0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z"></path> <path d="M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521\t\tc-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53\t\tc-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203\t\tc-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604\t\tc0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645\t\tc1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z"></path> <path d="M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461\t\tc0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882\t\tc0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881\t\tc-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461\t\tc-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915\t\tC5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0\t\tc0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408\t\tc0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406\t\tc-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799\t\tc0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468\t\tc-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607\t\tc0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038\t\tc-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113\t\tc-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z"></path></svg>',"arrow-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66"></polygon> <line fill="none" stroke="#000" x1="10.5" y1="4" x2="10.5" y2="15"></line></svg>',"arrow-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="10 14 5 9.5 10 5"></polyline> <line fill="none" stroke="#000" x1="16" y1="9.5" x2="5" y2="9.52"></line></svg>',"arrow-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="10 5 15 9.5 10 14"></polyline> <line fill="none" stroke="#000" x1="4" y1="9.5" x2="15" y2="9.5"></line></svg>',"arrow-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4"></polygon> <line fill="none" stroke="#000" x1="10.5" y1="16" x2="10.5" y2="5"></line></svg>',"chevron-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="16 7 10 13 4 7"></polyline></svg>',"chevron-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="13 16 7 10 13 4"></polyline></svg>',"chevron-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="7 4 13 10 7 16"></polyline></svg>',"chevron-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="4 13 10 7 16 13"></polyline></svg>',"cloud-download":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6"></path> <polyline fill="none" stroke="#000" points="11.75 16 9.5 18.25 7.25 16"></polyline> <path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5"></path></svg>',"cloud-upload":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6"></path> <polyline fill="none" stroke="#000" points="7.25 11.75 9.5 9.5 11.75 11.75"></polyline> <path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5"></path></svg>',"credit-card":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="1.5" y="4.5" width="17" height="12"></rect> <rect x="1" y="7" width="18" height="3"></rect></svg>',"file-edit":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z"></path> <polyline fill="none" stroke="#000" points="16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5"></polyline></svg>',"git-branch":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="3" r="2"></circle> <circle fill="none" stroke="#000" stroke-width="1.2" cx="14" cy="6" r="2"></circle> <circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="17" r="2"></circle> <path fill="none" stroke="#000" stroke-width="2" d="M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5"></path></svg>',"git-fork":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.2" cx="5.79" cy="2.79" r="1.79"></circle> <circle fill="none" stroke="#000" stroke-width="1.2" cx="14.19" cy="2.79" r="1.79"></circle> <ellipse fill="none" stroke="#000" stroke-width="1.2" cx="10.03" cy="16.79" rx="1.79" ry="1.79"></ellipse> <path fill="none" stroke="#000" stroke-width="2" d="M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57"></path></svg>',"github-alt":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z"></path></svg>',"google-plus":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.9,9c0,2.7-0.6,5-3.2,6.3c-3.7,1.8-8.1,0.2-9.4-3.6C-1.1,7.6,1.9,3.3,6.1,3c1.7-0.1,3.2,0.3,4.6,1.3 c0.1,0.1,0.3,0.2,0.4,0.4c-0.5,0.5-1.2,1-1.7,1.6c-1-0.8-2.1-1.1-3.5-0.9C5,5.6,4.2,6,3.6,6.7c-1.3,1.3-1.5,3.4-0.5,5 c1,1.7,2.6,2.3,4.6,1.9c1.4-0.3,2.4-1.2,2.6-2.6H6.9V9H12.9z"></path> <polygon points="20,9 20,11 18,11 18,13 16,13 16,11 14,11 14,9 16,9 16,7 18,7 18,9 "></polygon></svg>',"minus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9"></circle> <line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5"></line></svg>',"more-vertical":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="10" cy="3" r="2"></circle> <circle cx="10" cy="10" r="2"></circle> <circle cx="10" cy="17" r="2"></circle></svg>',"paint-bucket":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z"></path> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.42,2.33 L11.7,7.61"></path> <path d="M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z"></path></svg>',"phone-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z"></path> <circle cx="3.8" cy="10.5" r="0.8"></circle></svg>',"play-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" stroke-width="1.1" points="8.5 7 13.5 10 8.5 13"></polygon> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"></circle></svg>',"plus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9"></circle> <line fill="none" stroke="#000" x1="9.5" y1="5" x2="9.5" y2="14"></line> <line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5"></line></svg>',"quote-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z"></path> <path d="M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z"></path></svg>',"sign-in":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3"></polygon> <polygon points="9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5"></polygon></svg>',"sign-out":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5"></polygon> <polygon points="13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3"></polygon></svg>',"tablet-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z"></path> <circle cx="3.7" cy="10.5" r="0.8"></circle></svg>',"triangle-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="5 7 15 7 10 12"></polygon></svg>',"triangle-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="12 5 7 10 12 15"></polygon></svg>',"triangle-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="8 5 13 10 8 15"></polygon></svg>',"triangle-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="5 13 10 8 15 13"></polygon></svg>',"video-camera":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="18,6 18,14 12,10 "></polygon> <rect x="2" y="5" width="12" height="10"></rect></svg>'};return"undefined"!=typeof window&&window.UIkit&&window.UIkit.use(t),t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
